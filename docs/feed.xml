<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-05T14:50:51+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Artur Gurgul</title><subtitle>Here you can find all about me and my experience in software development.
</subtitle><entry><title type="html">Regex - notes</title><link href="http://localhost:4000/regex-notes.html" rel="alternate" type="text/html" title="Regex - notes" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/regex-notes</id><content type="html" xml:base="http://localhost:4000/regex-notes.html"><![CDATA[<p>How to match “any character” in the regular expression</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.</code> → any char except newline</li>
  <li><code class="language-plaintext highlighter-rouge">\.</code> → the actual dot character</li>
  <li><code class="language-plaintext highlighter-rouge">.?</code> = <code class="language-plaintext highlighter-rouge">.{0,1}</code> → match any char except newline zero or one times</li>
  <li><code class="language-plaintext highlighter-rouge">.*</code> = <code class="language-plaintext highlighter-rouge">.{0,}</code> → match any char except newline zero or more times</li>
  <li><code class="language-plaintext highlighter-rouge">.+</code> = <code class="language-plaintext highlighter-rouge">.{1,}</code> → match any char except newline one or more times</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[How to match “any character” in the regular expression]]></summary></entry><entry><title type="html">Recepies</title><link href="http://localhost:4000/recepies.html" rel="alternate" type="text/html" title="Recepies" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/recepies</id><content type="html" xml:base="http://localhost:4000/recepies.html"><![CDATA[<h4 id="read-a-dns-records">Read a DNS records</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dig artgur.net +nostats +nocomments +nocmd
</code></pre></div></div>

<h4 id="io-stats">I/O Stats</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iostat
</code></pre></div></div>

<h4 id="checking-type-of-executable-files">Checking type of executable files</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>otool -hv test.so
</code></pre></div></div>

<h4 id="gzip-of-image">Gzip of image</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">dd </span><span class="k">if</span><span class="o">=</span>/dev/sdb | <span class="nb">gzip</span> <span class="o">&gt;</span> ~/backup.img.gz
</code></pre></div></div>

<h4 id="get-directory-size">Get directory size</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>du -sh MacOSBackup
</code></pre></div></div>

<h5 id="print-all-sizes-in-directory">Print all sizes in directory</h5>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">du</span> <span class="nt">-sh</span> <span class="k">*</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">du</span> <span class="nt">-shc</span> <span class="k">*</span>
</code></pre></div></div>

<h4 id="compare-two-files">Compare two files</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim <span class="nt">-d</span> file1 file2
mcdiff file1 file2
</code></pre></div></div>

<h3 id="disk-manager">Disk manager</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cfdisk /dev/sda
</code></pre></div></div>

<h4 id="list-disks">List disks</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parted -l
</code></pre></div></div>

<h4 id="informations-about-disk">informations about disk</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fdisk <span class="nt">-l</span> /dev/sda
</code></pre></div></div>

<h4 id="power-off-the-disk">Power off the disk</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>udisksctl power-off -b /dev/sdX
</code></pre></div></div>
<h4 id="generate-random-password">Generate random password</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwgen <span class="nt">-s</span> <span class="nt">-1</span> 32
</code></pre></div></div>
<p>or</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl rand -hex 12
</code></pre></div></div>
<h4 id="list-block-devices">List block devices</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk
</code></pre></div></div>

<h4 id="linux-headers">Linux headers</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uname -r
apt search linux-headers-$(uname -r)
</code></pre></div></div>

<p>Show all disks with json format</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk <span class="nt">-J</span>
</code></pre></div></div>
<p>List disk with uuid’s</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsbkl <span class="nt">-f</span>
</code></pre></div></div>

<h4 id="mkfs">MKFS</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs.vfat <span class="nt">-F</span> 32 /dev/sdb4
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-i</span> <span class="nt">-t</span> vfat <span class="nt">-oumask</span><span class="o">=</span>0000,iocharset<span class="o">=</span>utf8 /dev/sdb4 /root
</code></pre></div></div>

<h4 id="see-what-processes-are-using-the-drive">See what processes are using the drive</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsof /where/drive/is/mounted
</code></pre></div></div>

<h4 id="see-the-stats-of-io">See the stats of IO</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install sysstat iotop
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iostat -dh 2
iotop -o
sar -p -d -b 1
vmstat -d 1
vmstat -p /dev/sda2 1
</code></pre></div></div>

<h3 id="rsync">Rsync</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync -ah --progress /Volumes/Data /Volumes/Data\ 1/Junk/1TB\ Drive
</code></pre></div></div>

<h4 id="reloading-local-dns">reloading local DNS</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> /etc/init.d/dns-clean start
</code></pre></div></div>

<h4 id="print-all-processes-in-json-format">Print all processes in json format</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux |
  <span class="nb">awk</span> <span class="nt">-v</span> <span class="nv">OFS</span><span class="o">=</span>, <span class="s1">'{print $1, $2}'</span> |
  jq <span class="nt">-R</span> <span class="s1">'split(",") | {user: .[0], pid: .[1]}'</span>
</code></pre></div></div>

<h4 id="search-and-execute-command-from-the-history">Search and execute command from the history</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="sb">`</span><span class="nb">history</span> | fzf | <span class="nb">cut</span>  <span class="nt">-s</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f4-</span><span class="sb">`</span>
</code></pre></div></div>

<p>Adding this to <code class="language-plaintext highlighter-rouge">.zshrc</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export HISTSIZE=100000000
alias hexec='eval `history | fzf | cut  -s -d " " -f4-`'
</code></pre></div></div>
<h4 id="editing-command-with-editor">Editing command with editor</h4>

<p><code class="language-plaintext highlighter-rouge">~/.zshrc</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bindkey '^e' edit-command-line
</code></pre></div></div>
<h4 id="copy-public-ssh-key">Copy public ssh key</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa.pub | pbcopy
</code></pre></div></div>

<h4 id="change-password-that-was-saved-in-a-variable">change password that was saved in a variable</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cho <span class="s2">"</span><span class="nv">$archpass</span><span class="s2">"</span> | passwd <span class="s2">"</span><span class="nv">$archuser</span><span class="s2">"</span> <span class="nt">--stdin</span>
</code></pre></div></div>
<h4 id="git-diff-between-branches">Git diff between branches</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff release-1.2.0..release-1.2.1
</code></pre></div></div>

<h4 id="macos-info-aliases-inzhrc">MacOS info aliases in<code class="language-plaintext highlighter-rouge">.zhrc</code></h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  alias cpu='sysctl -n machdep.cpu.brand_string'
  alias cpu-temp='sudo powermetrics --samplers smc | grep -i "CPU die temperature"'
  alias gpu-temp='sudo powermetrics --samplers smc | grep -i "GPU die temperature"'
  alias lsusb='sudo ioreg -p IOUSB'
  alias allusb='ioreg -p IOUSB -w0 -l'
</code></pre></div></div>

<p><strong>Power metrics</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>powermetrics <span class="nt">--samplers</span> all
</code></pre></div></div>
<h4 id="install-pods-from-non-standard-localisations">Install pods from non standard localisations</h4>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">pod</span> <span class="s1">'WASHD'</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">'https://github.com/vatlib/EasyUITextFields.git'</span>
 <span class="n">pod</span> <span class="s1">'WASHD'</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">'/Users/artur/projs/easyuitextfields'</span>
</code></pre></div></div>

<h4 id="sqlite-select-and-search-results-with-fzf">SQLite select and search results with FZF</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"select * from bookmarks"</span> | sqlite3 bookmarks.db | fzf
</code></pre></div></div>

<h4 id="open-file-with-fzf">Open file with FZF</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim <span class="nt">-o</span> <span class="sb">`</span>fzf<span class="sb">`</span>
</code></pre></div></div>

<h4 id="set-default-shell-zsh-in-this-case">Set default shell. ZSH in this case</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo chsh --shell /usr/bin/zsh user
</code></pre></div></div>

<h4 id="show-git-object">Show Git object</h4>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pigz <span class="nt">-d</span> &lt; .git/objects/02/f2cc93fee0b3cb7c9b75f49e4ded3f9b1480eb
</code></pre></div></div>

<h4 id="list-of-wireless-cards">list of wireless cards</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci -knn | grep Net -A2
</code></pre></div></div>

<h4 id="scan-networks">Scan networks</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iwlist scan
</code></pre></div></div>

<h4 id="shutdown">Shutdown</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shutdown -h now
</code></pre></div></div>

<h4 id="connect-to-the-network">Connect to the network</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmcli dev wifi connect TP-Link_5828 password my-secret-pass
</code></pre></div></div>

<h4 id="you-can-forward-port-80-to-8090">You can forward port <code class="language-plaintext highlighter-rouge">80</code> to <code class="language-plaintext highlighter-rouge">8090</code></h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iptables <span class="nt">-t</span> nat <span class="nt">-A</span> PREROUTING <span class="nt">-p</span> tcp <span class="nt">--dport</span> 80 <span class="nt">-j</span> REDIRECT <span class="nt">--to-port</span> 8090
</code></pre></div></div>

<h4 id="allow-accepting-connections-on-8090">Allow accepting connections on <code class="language-plaintext highlighter-rouge">8090</code></h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iptables <span class="nt">-I</span> INPUT <span class="nt">-m</span> tcp <span class="nt">-p</span> tcp <span class="nt">--dport</span> 8090 <span class="nt">-j</span> ACCEPT
</code></pre></div></div>
<h4 id="search-files-that-contains-particular-string">Search files that contains particular string</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-rnw</span> <span class="s2">"."</span> <span class="nt">-e</span> <span class="s2">"Search key"</span>
</code></pre></div></div>

<h4 id="remove-garbage-files">Remove garbage files</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find ./ -name ".DS_Store" -depth -exec rm {} \;
</code></pre></div></div>

<h4 id="find-files-directories-and-symbolic-links-using-regex">Find files, directories and symbolic links using regex</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find ./ -iname `fo*` and `F??` -type f,d,l
</code></pre></div></div>

<h4 id="make-text-from-pipe-uppercased">Make text from pipe uppercased</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>file.txt | <span class="nb">tr</span> <span class="o">[</span>:lower:] <span class="o">[</span>:upper:]
<span class="nb">cat </span>file.txt | <span class="nb">tr</span> <span class="o">[</span>a-z] <span class="o">[</span>A-Z]
<span class="nb">tr</span> <span class="o">[</span>a-z] <span class="o">[</span>A-Z] &lt; linux.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div>

<h4 id="installing-packages-for-python">Installing packages for python</h4>

<p><strong><em>just for user</em></strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install</span> <span class="nt">--user</span> meson
</code></pre></div></div>

<p><strong><em>calling module through interpreter</em></strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> pip <span class="nb">install </span>six
</code></pre></div></div>

<h4 id="remove-spaces">Remove spaces</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>file.txt | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">' '</span> 
</code></pre></div></div>

<h4 id="remove-duplicate-characters">Remove duplicate characters</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>domains.txt

www.google.....com
www.linkedin.com
www.linuxsay.com
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>domains.txt | <span class="nb">tr</span> <span class="nt">-s</span> <span class="s1">'.'</span> 

www.google.com
www.linkedin.com
</code></pre></div></div>

<h4 id="extract-digit">Extract digit</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"My UID is </span><span class="nv">$UID</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="nt">-cd</span> <span class="s2">"[:digit:]</span><span class="se">\n</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"My UID is </span><span class="nv">$UID</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s2">"a-zA-Z"</span>
</code></pre></div></div>

<h4 id="translate-single-character">Translate single character</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"My UID is </span><span class="nv">$UID</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s2">" "</span>  <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>
</code></pre></div></div>

<h4 id="screen-capture">Screen capture</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg -f x11grab -video_size 1280x800 -framerate 25 -i $DISPLAY -c:v ffvhuff screen.mkv

ffmpeg -video_size 1280x800 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2. \
       -i default -vcodec vp8 -acodec libvorbis myvideo_$(date +%d_%B_%Y_%H:%M).webm
</code></pre></div></div>

<h4 id="take-a-screenshot">Take a screenshot</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xwd <span class="nt">-root</span> <span class="nt">-out</span> screenshot.xwd
maim <span class="nt">-s</span> <span class="nt">-u</span> | xclip <span class="nt">-selection</span> clipboard <span class="nt">-t</span> image/png <span class="nt">-i</span>
imlib2_grab screenshot.png
</code></pre></div></div>

<h4 id="install-python-package-for-the-user">Install Python package for the user</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 -m pip install --user pyelftools
</code></pre></div></div>

<h4 id="erase-free-space">Erase free space</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo diskutil secureErase freespace 1 /Volumes/Data\ Drive
</code></pre></div></div>

<h4 id="search-for-commit">Search for commit</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">gf</span><span class="o">=</span><span class="s1">'git log --all --oneline | fzf'</span>
</code></pre></div></div>

<h4 id="remove-alpha-channel-from-all-files">Remove alpha channel from all files</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ➜ brew install imagemagick</span>
</code></pre></div></div>

<p><strong>Converts all files in current directory revursevely</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">rmalfa</span><span class="o">=</span><span class="s1">'find . -name “*.png” -exec convert “{}” -alpha off “{}” \;'</span>
</code></pre></div></div>

<h4 id="weather-alias">Weather alias</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">weather</span><span class="o">=</span><span class="s1">'curl wttr.in'</span>
</code></pre></div></div>

<h4 id="starting-an-electron-app-on-wayland">Starting an electron app on wayland</h4>

<p>Start chromium using wayland</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chromium <span class="nt">--enable-features</span><span class="o">=</span>UseOzonePlatform <span class="nt">--ozone-platform</span><span class="o">=</span>wayland
</code></pre></div></div>

<p>It’s the same for electron-based apps:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sb">`</span>app-executable<span class="sb">`</span> <span class="nt">--enable-features</span><span class="o">=</span>UseOzonePlatform <span class="se">\</span>
                 <span class="nt">--ozone-platform</span><span class="o">=</span>wayland
</code></pre></div></div>

<h4 id="save-website-as-pdf">Save website As PDF</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>aspdf <span class="o">{</span>
  /Applications/Google<span class="se">\ </span>Chrome.app/Contents/MacOS/Google<span class="se">\ </span>Chrome <span class="nt">--headless</span> <span class="nt">--print-to-pdf</span><span class="o">=</span><span class="s2">"./</span><span class="nv">$1</span><span class="s2">.pdf"</span> <span class="nv">$2</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Usage</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aspdf <span class="s2">"filename"</span> <span class="s2">"https://superuser.com/questions/592974/how-to-print-to-save-as-pdf-from-a-command-line-with-chrome-or-chromium"</span>
</code></pre></div></div>

<h3 id="export-markdown-as-pdf">Export Markdown as PDF</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc README.md <span class="nt">-o</span> README.pdf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc <span class="nt">--from</span><span class="o">=</span>gfm <span class="nt">--to</span><span class="o">=</span>pdf <span class="nt">-o</span> README.pdf README.md
</code></pre></div></div>

<h4 id="gem-path">Gem path</h4>

<pre><code class="language-hash">export GEM_HOME=$HOME/.gem
path=("$GEM_HOME/bin" $path)
</code></pre>

<h4 id="qemu---port-forwarding">QEMU - port forwarding</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-i386 <span class="nt">-net</span> nic,model<span class="o">=</span>rtl8139 <span class="se">\</span>
        <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::3389-:3389,hostfwd<span class="o">=</span>tcp::443-:443,hostfwd<span class="o">=</span>tcp::992-:992 
</code></pre></div></div>

<h4 id="sql-using-regex">SQL using regex</h4>
<p>Add a check constraint to the <code class="language-plaintext highlighter-rouge">id</code> column to enforce alphanumeric strings of exactly 5 characters long</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">short_urls</span> <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">id</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">id</span> <span class="o">~</span> <span class="s1">'^[a-zA-Z0-9]{5}$'</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="console-font-size">Console font size</h4>

<p>Edit file → <code class="language-plaintext highlighter-rouge">/etc/default/console-setup</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dpkg-reconfigure <span class="nt">-plow</span> console-setup
</code></pre></div></div>

<h4 id="redirect-errors-to-null-device">Redirect errors to null device</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / 2&gt;/dev/null
</code></pre></div></div>

<h4 id="installing-nonfree-firmware-from-repository">Installing nonfree firmware from repository</h4>

<p>I.e: Firmware for nonfree driver for Intel’s WIFI cards.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://packages.debian.org/sid/firmware-iwlwifi
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>firmware-linux-nonfree
</code></pre></div></div>

<h4 id="installing-nonfree-firmware-from-manufacturer">Installing nonfree firmware from ​manufacturer</h4>

<p>Search for binary. An example:</p>

<p><a href="https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html">https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html</a></p>

<p>Extract and copy like</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>iwlwifi-cc-a0-46.ucode /lib/firmware
</code></pre></div></div>

<h3 id="linux---ram-disk">Linux - RAM disk</h3>

<p>This might be useful for spead up programs that heavily use disk.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount -t TYPE -o size=SIZE FSTYPE MOUNTPOINT
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">TYPE</code> → either <code class="language-plaintext highlighter-rouge">tmpfs</code> or <code class="language-plaintext highlighter-rouge">ramfs</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">SIZE</code> → ie. <code class="language-plaintext highlighter-rouge">512m</code></li>
  <li><code class="language-plaintext highlighter-rouge">FSTYPE</code> → File system type, either <code class="language-plaintext highlighter-rouge">tmpfs</code>, <code class="language-plaintext highlighter-rouge">ramfs</code>, <code class="language-plaintext highlighter-rouge">ext4</code>, etc.</li>
</ul>

<p>To make this setting persistent you might want to add to <code class="language-plaintext highlighter-rouge">/etc/fstab</code> fallowing line</p>

<pre><code class="language-plain">tmpfs /mnt/ramdisk tmpfs nodev,nosuid,noexec,nodiratime,size=1024M 0 0
</code></pre>

<h4 id="fstab">fstab</h4>

<p>Use ‘blkid’ to print the universally unique identifiers, and can be used in fstab file like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># &lt;file system&gt;                            &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;                        &lt;dump&gt;  &lt;pass&gt;

UUID=1a38b8ca-e1f5-45e6-bbe8-3abd2775b3a6  /               ext4    errors=remount-ro                0       1
/swapfile                                  none            swap    sw                               0       0
/dev/disk/by-uuid/4D3C-4E36                /mnt/4D3C-4E36  auto    nosuid,nodev,nofail,x-gvfs-show  0       0

UUID=e21eebe4-471a-4375-8c4c-618b3733a940  /home           ext4    nodev,nosuid                     0       2
</code></pre></div></div>

<h3 id="linux---mount-disk-from-qcow2-image">Linux - Mount disk from <code class="language-plaintext highlighter-rouge">qcow2</code> image</h3>

<p>Step 1 - Enable NBD on the Host</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modprobe nbd <span class="nv">max_part</span><span class="o">=</span>8
</code></pre></div></div>

<p>Step 2 - Connect the QCOW2 as network block device</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-nbd <span class="nt">--connect</span><span class="o">=</span>/dev/nbd0 /var/lib/vz/images/100/vm-100-disk-1.qcow2
</code></pre></div></div>

<p>Step 3 - Find The Virtual Machine Partitions</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fdisk /dev/nbd0 <span class="nt">-l</span>
</code></pre></div></div>

<p>Step 4 - Mount the partition from the VM</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/nbd0p1 /mnt/somepoint/
</code></pre></div></div>

<p>Step 5 - After you done, unmount and disconnect</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>umount /mnt/somepoint/
qemu-nbd <span class="nt">--disconnect</span> /dev/nbd0
rmmod nbd
</code></pre></div></div>

<h3 id="ubuntu---power-management">Ubuntu - Power management</h3>

<p>To make Ubuntu do nothing when laptop lid is closed:</p>

<p>From For 13.10 onwards:</p>

<p>Open the <code class="language-plaintext highlighter-rouge">/etc/systemd/logind.conf</code> file in a text editor as root, for example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-H</span> gedit /etc/systemd/logind.conf
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">HandleLidSwitch</code> is not set to ignore then change it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">HandleLidSwitch</span><span class="o">=</span>ignore
</code></pre></div></div>

<p>Other settings that the action can be ignored: <code class="language-plaintext highlighter-rouge">HandleLidSwitchExternalPower</code>, <code class="language-plaintext highlighter-rouge">HandleLidSwitchDocked</code>, <code class="language-plaintext highlighter-rouge">IdleAction</code>.</p>

<p>Restart the systemd daemon (be aware that this command will log you out):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart systemd-logind
</code></pre></div></div>

<p>or, from 15.04 onwards:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service systemd-logind restart
</code></pre></div></div>

<h3 id="chroot-environment-of-debian-sid">Chroot environment of Debian sid</h3>

<p>Install Bootstrap</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>debootstrap
</code></pre></div></div>

<p>Create a directory that you want to use for the base system (<em>chroot-debian</em> in this case)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>chroot-debian
</code></pre></div></div>

<p>Create a base system</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>debootstrap sid chroot-debian http://deb.debian.org/debian
</code></pre></div></div>

<p>Valid names <code class="language-plaintext highlighter-rouge">sid</code>, <code class="language-plaintext highlighter-rouge">stable</code> or any debian code name</p>

<p>Mount  filesystems</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /dev chroot-debian/dev
<span class="nb">sudo </span>mount <span class="nt">-t</span> sysfs none chroot-debian/sys
<span class="nb">sudo </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /proc chroot-debian/proc
</code></pre></div></div>

<p>Optionally, copy DNS resolver configuration.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo cp /etc/resolv.conf /path/to/chroot-env/etc/resolv.conf
</code></pre></div></div>

<p>Start chrooting</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chroot </span>chroot-debian /bin/bash
</code></pre></div></div>

<p>Once done, exit the session and unmount</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>umount chroot-debian/dev chroot-debian/proc
</code></pre></div></div>

<h4 id="pass-variables-to-chrooted-environment">Pass variables to chrooted environment</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chroot</span> ./ <span class="nb">env</span> <span class="nt">-i</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>
</code></pre></div></div>

<h1 id="allowing-user-to-run-a-command-as-root">Allowing user to run a command as root</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>visudo
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>artur ALL=(ALL) chroot /path/to/chroot-env
</code></pre></div></div>

<h4 id="nginx---serving-files-setup-dav">Nginx - serving files setup DAV</h4>

<p>Full version with 3rd party extensions</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install nginx-full nginx-extras
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    location / {
        index nonextistent;
        autoindex on;
        autoindex_format json;
    }

	location /restricted {
		fancyindex on;
        fancyindex_exact_size off;
		auth_basic "Restricted";
	    auth_basic_user_file "/etc/nginx/.htpasswd";
	}

    location /dropbox {
        index nonextistent;
        autoindex on;
        autoindex_format json;

        dav_methods PUT DELETE MKCOL COPY MOVE;
        dav_ext_methods PROPFIND OPTIONS LOCK UNLOCK;
        dav_access user:rw group:r all:r;

        # client_max_body_size 0;
        create_full_put_path on;
        client_body_temp_path /tmp/;

		limit_except GET PROPFIND OPTIONS HEAD {
	        auth_basic "Restricted";
	        auth_basic_user_file "/etc/nginx/.htpasswd";
	    }
        # auth_pam "Restricted";  
        # auth_pam_service_name "common-auth";
    }
</code></pre></div></div>

<p>Create password</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-n</span> <span class="s1">'sammy:'</span> <span class="o">&gt;&gt;</span> /etc/nginx/.htpasswd
openssl passwd <span class="nt">-apr1</span> <span class="o">&gt;&gt;</span> /etc/nginx/.htpasswd
</code></pre></div></div>

<p>Another method to set the password</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>htpasswd <span class="nt">-c</span> /etc/nginx/.htpasswd sammy
htpasswd /etc/nginx/.htpasswd another_user
</code></pre></div></div>

<p><strong>UI Client <code class="language-plaintext highlighter-rouge">Cyberduck</code></strong></p>

<h4 id="backing-up-the-entire-os">Backing up the entire OS</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo rsync -aAXHv / --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} /mnt
</code></pre></div></div>

<p>Python</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>install python3-full
</code></pre></div></div>

<h3 id="check-battery">Check battery</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upower <span class="nt">-i</span> /org/freedesktop/UPower/devices/battery_BAT0
upower <span class="nt">-i</span> <span class="sb">`</span>upower <span class="nt">-e</span> | <span class="nb">grep</span> <span class="s1">'BAT'</span><span class="sb">`</span>
upower <span class="nt">-i</span> <span class="si">$(</span>upower <span class="nt">-e</span> | <span class="nb">grep </span>BAT<span class="si">)</span> | <span class="nb">grep</span> <span class="nt">--color</span><span class="o">=</span>never <span class="nt">-E</span> <span class="s2">"state|to</span><span class="se">\ </span><span class="s2">full|to</span><span class="se">\ </span><span class="s2">empty|percentage"</span>
</code></pre></div></div>

<p>Battery capacity</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /sys/class/power_supply/BAT0/capacity
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">apt install acpi</code></p>

<p>acpi -V
acpi -t</p>

<p>Watch the status for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watch --interval=5 acpi -V
</code></pre></div></div>

<h3 id="how-to-scan-open-ports">How to scan open ports</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap -sT -p- 10.10.8.8
nmap -p 80 127.0.0.1
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Read a DNS records]]></summary></entry><entry><title type="html">Vim notes</title><link href="http://localhost:4000/software/vim.html" rel="alternate" type="text/html" title="Vim notes" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/software/vim</id><content type="html" xml:base="http://localhost:4000/software/vim.html"><![CDATA[<h4 id="symbols-and-meanings">Symbols and meanings</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">%</code> → current file. An example:  <code class="language-plaintext highlighter-rouge">:so %</code> → Source the current file</li>
  <li><code class="language-plaintext highlighter-rouge">$</code> → end of line</li>
  <li><code class="language-plaintext highlighter-rouge">.</code> → Current line An example: <code class="language-plaintext highlighter-rouge">:.!sh</code> → Pipe current line to <code class="language-plaintext highlighter-rouge">sh</code> and replace it with the output</li>
</ul>

<p>Entering <code class="language-plaintext highlighter-rouge">!!</code> in normal mode is translated to  <code class="language-plaintext highlighter-rouge">:.!</code> I. e. Typing <code class="language-plaintext highlighter-rouge">!!date</code> in normal mode replaces current line with the date.</p>

<h4 id="tips">Tips</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:e[dit]</code> →	Edit the current file. This is useful to re-edit the current file, when it has been changed outside of Vim. <code class="language-plaintext highlighter-rouge">:e!</code> Force reload file</li>
  <li><code class="language-plaintext highlighter-rouge">:help index</code> → Get all default mappings</li>
</ul>

<h4 id="navigation">Navigation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">h</code>  <code class="language-plaintext highlighter-rouge">j</code>  <code class="language-plaintext highlighter-rouge">k</code>  <code class="language-plaintext highlighter-rouge">l</code> → left, down, up, right</li>
  <li><code class="language-plaintext highlighter-rouge">*</code> → Next whole word under cursor (previous <code class="language-plaintext highlighter-rouge">#</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">e</code> → Forward to the end of word. <code class="language-plaintext highlighter-rouge">E</code> can contain punctuation</li>
  <li><code class="language-plaintext highlighter-rouge">w</code> → Move forward to the beginning of a word. <code class="language-plaintext highlighter-rouge">W</code> Same as <code class="language-plaintext highlighter-rouge">w</code>, but special characters are treated as part of a word.</li>
  <li><code class="language-plaintext highlighter-rouge">b</code> → Works as <code class="language-plaintext highlighter-rouge">w</code>, but backwards</li>
  <li><code class="language-plaintext highlighter-rouge">{</code>,<code class="language-plaintext highlighter-rouge">}</code> → Jump by paragraphs</li>
  <li><code class="language-plaintext highlighter-rouge">(</code>,<code class="language-plaintext highlighter-rouge">)</code> → Jump by sentences</li>
  <li><code class="language-plaintext highlighter-rouge">G</code> → Jump to the end of the file</li>
  <li><code class="language-plaintext highlighter-rouge">1G</code> → Jump to the beginning of the file (same as <code class="language-plaintext highlighter-rouge">gg</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">50G</code> → Jump to line 50</li>
  <li><code class="language-plaintext highlighter-rouge">0</code> → Beginning of line</li>
  <li><code class="language-plaintext highlighter-rouge">_</code> or <code class="language-plaintext highlighter-rouge">^</code> → first non-blank character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">g_</code>  → last non-blank character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">fX</code> → next character <code class="language-plaintext highlighter-rouge">X</code>. <code class="language-plaintext highlighter-rouge">FX</code> previous. <code class="language-plaintext highlighter-rouge">;</code>   repeat , <code class="language-plaintext highlighter-rouge">,</code>   repeat in reverse</li>
  <li><code class="language-plaintext highlighter-rouge">tX</code> → tili next <code class="language-plaintext highlighter-rouge">X</code> (similar to above, but the cursor is before <code class="language-plaintext highlighter-rouge">X</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">H</code> → Jump to the top of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">M</code> → Jump to the middle of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">L</code> → Jump to the bottom of the screen</li>
</ul>

<h4 id="scrolling">Scrolling</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">10 &lt;PageUp&gt;</code> or <code class="language-plaintext highlighter-rouge">10&lt;CTRL-B&gt;</code> → Move 10 pages up</li>
  <li><code class="language-plaintext highlighter-rouge">5 &lt;PageDown&gt;</code> or <code class="language-plaintext highlighter-rouge">5&lt;CTRL-F&gt;</code> → Move 5 pages down.</li>
  <li><code class="language-plaintext highlighter-rouge">zz</code>  → scroll the line with the cursor to the center of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">zt</code>  → to the top</li>
  <li><code class="language-plaintext highlighter-rouge">zb</code>  → to the bottom</li>
</ul>

<h3 id="terminal-buffers">Terminal buffers</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:te[rm[inal]] command</code></li>
  <li><code class="language-plaintext highlighter-rouge">:b#</code> switch buffer</li>
  <li><code class="language-plaintext highlighter-rouge">:ls</code> list buffers</li>
  <li><code class="language-plaintext highlighter-rouge">:buff 1</code> or <code class="language-plaintext highlighter-rouge">:b1</code> switch to buffer 1</li>
</ul>

<h3 id="list-of-the-commands">List of the commands</h3>

<p>Common meaning of letters in the commands</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">w</code> → word</li>
  <li><code class="language-plaintext highlighter-rouge">i</code> → inner</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Command</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">dd</code></td>
      <td style="text-align: left">Delete one line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">d</code></td>
      <td style="text-align: left">Delete selection</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">x</code></td>
      <td style="text-align: left">Delete character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">d+</code></td>
      <td style="text-align: left">Delete 2 lines</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%d</code> or :<code class="language-plaintext highlighter-rouge">1,$d</code></td>
      <td style="text-align: left">Delete the whole of the file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">dw</code>, <code class="language-plaintext highlighter-rouge">diw</code></td>
      <td style="text-align: left">Delete what that the cursor is over</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">di(</code></td>
      <td style="text-align: left">Delete inner brackets. <code class="language-plaintext highlighter-rouge">da(</code> → including brackets</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:r[ead] !date</code></td>
      <td style="text-align: left">Execute commend and put content into editor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">.</code></td>
      <td style="text-align: left">Repeat the last operation</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">gU</code></td>
      <td style="text-align: left">Uppercase the selection, <code class="language-plaintext highlighter-rouge">gu</code>  → lower</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">%</code></td>
      <td style="text-align: left">Jump to matching bracket <code class="language-plaintext highlighter-rouge">{ }</code> <code class="language-plaintext highlighter-rouge">[ ]</code> <code class="language-plaintext highlighter-rouge">( )</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%!column -t</code></td>
      <td style="text-align: left">Put text in columns</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%!sort</code></td>
      <td style="text-align: left">Sort the whole file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;!grep text</code></td>
      <td style="text-align: left">Keep lines that contains <code class="language-plaintext highlighter-rouge">text</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;!sort</code></td>
      <td style="text-align: left">Sort selected lines</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:eariler 1m</code></td>
      <td style="text-align: left">State from the 1 min before</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ga</code></td>
      <td style="text-align: left">Display hex, ascii value of character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">g8 </code></td>
      <td style="text-align: left">Display hex value of utf-8 character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ciw</code></td>
      <td style="text-align: left">Change inner word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">yiw</code></td>
      <td style="text-align: left">Yank inner word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">viwp</code></td>
      <td style="text-align: left">Select word and then replace it with previously yanked text</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">rX</code></td>
      <td style="text-align: left">replace every character in selection or under cursor with <code class="language-plaintext highlighter-rouge">X</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">guiw</code></td>
      <td style="text-align: left">Lower case word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">guu</code></td>
      <td style="text-align: left">Lowercase line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">gUU</code></td>
      <td style="text-align: left">Uppercase line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">=</code></td>
      <td style="text-align: left">Indent the selection</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">=%</code></td>
      <td style="text-align: left">Indent the current braces</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">G=gg</code></td>
      <td style="text-align: left">indent entire document</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ZZ</code></td>
      <td style="text-align: left">Write current file, if modified, and exit (same as <code class="language-plaintext highlighter-rouge">:wq</code>)</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ZQ</code></td>
      <td style="text-align: left">Quit current file and exit (same as <code class="language-plaintext highlighter-rouge">:q!</code>)</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:so %</code></td>
      <td style="text-align: left">Source current file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">@:</code></td>
      <td style="text-align: left">Execute last command again</td>
    </tr>
  </tbody>
</table>

<h4 id="status-line">Status line</h4>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span><span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>%<span class="p">&lt;</span>%<span class="k">f</span>%<span class="k">h</span>%<span class="k">m</span>%<span class="k">r</span>%<span class="p">=</span>%<span class="k">b</span>\ <span class="m">0</span><span class="k">x</span>%B\ \ %<span class="k">l</span><span class="p">,</span>%<span class="k">c</span>%V\ %P
</code></pre></div></div>

<h4 id="visual-mode">Visual Mode</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">V</code> → Selection by lines</li>
  <li><code class="language-plaintext highlighter-rouge">v</code> → Selection follows the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+v</code> →  Block selection
    <ul>
      <li>When selected block you can applay changes to each line by typing <code class="language-plaintext highlighter-rouge">I</code> editing and finally pressing <code class="language-plaintext highlighter-rouge">Esc</code></li>
    </ul>
  </li>
</ul>

<h4 id="enter-insert-mode">Enter Insert Mode</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">I</code> → At the first non white character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">i</code> → On the left of the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">A</code> → At the very end of the line</li>
  <li><code class="language-plaintext highlighter-rouge">a</code> → On the right of the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">c</code> →  Delete selection and enter insert mode</li>
  <li><code class="language-plaintext highlighter-rouge">o</code> → Create new line below and enter insert mode</li>
  <li><code class="language-plaintext highlighter-rouge">O</code> → Create new line above and enter insert mode</li>
</ul>

<h4 id="split-the-editor">Split the editor</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:sp &lt;filename&gt;</code> → Vertically</li>
  <li><code class="language-plaintext highlighter-rouge">:vs &lt;filename&gt;</code> → Horizontally</li>
  <li><code class="language-plaintext highlighter-rouge">:set splitbelow</code>, <code class="language-plaintext highlighter-rouge">:set splitright</code></li>
</ul>

<h4 id="markers">Markers</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:marks</code> →  list of marks</li>
  <li><code class="language-plaintext highlighter-rouge">ma</code> → set current position for mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">`a</code> → jump to the cursor position of mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">'a</code> →  jump to the beginning of a line of a mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">y`a</code> → yank text to position of mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">``</code> → Return to the cursor position before the latest jump</li>
  <li><code class="language-plaintext highlighter-rouge">`.</code>  → Jump to the last changed line.</li>
</ul>

<h3 id="recording-macros">Recording macros</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">qa</code> → Start recording macro under letter <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">q</code> → Stop recording</li>
  <li><code class="language-plaintext highlighter-rouge">@a</code> → Play the macro saved under letter a</li>
  <li><code class="language-plaintext highlighter-rouge">@@</code> → Play the last macro</li>
</ol>

<h4 id="searching">Searching</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:%s/Plug.*$//</code> → Search and delete all lines that starts from Plug</li>
  <li><code class="language-plaintext highlighter-rouge">:%s/foo/bar/gc</code> → Replace all occurrence of foo by bar with confirmation</li>
  <li><code class="language-plaintext highlighter-rouge">'&lt;,'&gt;:s/find/replacewith/</code> Replace selection</li>
  <li><code class="language-plaintext highlighter-rouge">/pattern</code> → search for pattern then enter and <code class="language-plaintext highlighter-rouge">n</code> next <code class="language-plaintext highlighter-rouge">N</code> previous match</li>
  <li><code class="language-plaintext highlighter-rouge">?pattern</code> → search backward for pattern</li>
</ul>

<h3 id="registers">Registers</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:reg</code> → print all registers</li>
  <li><code class="language-plaintext highlighter-rouge">"ap</code> → paste the register <code class="language-plaintext highlighter-rouge">a</code> , if the macro is recorded then it will paste it</li>
  <li><code class="language-plaintext highlighter-rouge">"xy</code> → yank into register <code class="language-plaintext highlighter-rouge">x</code></li>
  <li><code class="language-plaintext highlighter-rouge">:let @a = "kkll"</code> → set a macro from the command mode</li>
  <li><code class="language-plaintext highlighter-rouge">:let @A='i'</code>  →  append to register <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">:%normal @a</code>  → execute the macro on all lines of the current file</li>
  <li><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;normal @a</code>  → execute the macro on a visually selected lines</li>
  <li><code class="language-plaintext highlighter-rouge">:10,20 normal @a</code> → execute the macro for lines from 10 to 20</li>
  <li><code class="language-plaintext highlighter-rouge">:g/pattern/ normal @a</code> → Search for pattern and execute macro for it</li>
</ul>

<h4 id="functions---an-example">Functions - An example</h4>

<p>Function definition</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="p">!</span> CalculateAge<span class="p">()</span>
    normal <span class="m">03</span>wdei^R<span class="p">=</span><span class="m">2012</span><span class="p">-</span>^R"^M^<span class="p">[</span><span class="m">0</span><span class="k">j</span> 
<span class="k">endfunction</span>
</code></pre></div></div>

<p>Key banding to function</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">a</span> <span class="p">:</span><span class="k">call</span> CalculateAge<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</code></pre></div></div>

<p>Preloading vim with macros like</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> @<span class="k">a</span><span class="p">=</span><span class="s1">'03wdei^R=2012-^R"^M^[0j'</span>
</code></pre></div></div>

<p>Call function from the command mode</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:call CalculateAge()
</code></pre></div></div>

<h4 id="configuration">Configuration</h4>

<p>The config file is located at <code class="language-plaintext highlighter-rouge">.config/nvim/init.vim</code></p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="nb">empty</span><span class="p">(</span><span class="nb">glob</span><span class="p">(</span><span class="s1">'~/.local/share/nvim/site/autoload/plug.vim'</span><span class="p">))</span>
  <span class="k">silent</span> <span class="p">!</span>curl <span class="p">-</span>fLo <span class="p">~</span><span class="sr">/.local/</span>share<span class="sr">/nvim/</span>site<span class="sr">/autoload/</span>plug<span class="p">.</span><span class="k">vim</span> <span class="p">--</span>create<span class="p">-</span>dirs
<span class="se">    \</span> https<span class="p">:</span><span class="sr">//</span>raw<span class="p">.</span>githubusercontent<span class="p">.</span><span class="k">com</span><span class="sr">/junegunn/</span><span class="k">vim</span><span class="p">-</span>plug<span class="sr">/master/</span>plug<span class="p">.</span><span class="k">vim</span>
  autocmd <span class="nb">VimEnter</span> * PlugInstall <span class="p">--</span><span class="k">sync</span> <span class="p">|</span> <span class="k">source</span> $MYVIMRC
<span class="k">endif</span>

<span class="k">call</span> plug#begin<span class="p">(</span><span class="s1">'~/.vim/plugged'</span><span class="p">)</span>

  Plug <span class="s1">'junegunn/fzf'</span>

  Plug <span class="s1">'neovim/nvim-lspconfig'</span>
  Plug <span class="s1">'neoclide/coc.nvim'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'branch'</span><span class="p">:</span> <span class="s1">'release'</span><span class="p">}</span>
  
  Plug <span class="s1">'vim-airline/vim-airline'</span>
  Plug <span class="s1">'vim-airline/vim-airline-themes'</span>
  
  Plug <span class="s1">'vim-syntastic/syntastic'</span>
  Plug <span class="s1">'tokorom/syntastic-swiftlint.vim'</span>
  
<span class="k">call</span> plug#end<span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">set relativenumber</code></li>
  <li><code class="language-plaintext highlighter-rouge">set encoding=utf-8</code></li>
  <li><code class="language-plaintext highlighter-rouge">syntax on</code></li>
  <li><code class="language-plaintext highlighter-rouge">map za :FZF&lt;CR&gt;</code> → fuzzy finder over <code class="language-plaintext highlighter-rouge">za</code></li>
</ul>

<p>Indentation setup</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">set tabstop=2 shiftwidth=2 expandtab</code></li>
  <li><code class="language-plaintext highlighter-rouge">filetype plugin indent on</code></li>
</ul>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:syntastic_swift_checkers</span> <span class="p">=</span> <span class="p">[</span><span class="s1">'swiftlint'</span><span class="p">,</span> <span class="s1">'swiftpm'</span><span class="p">]</span>
<span class="k">lua</span> <span class="p">&lt;&lt;</span> EOF
  local lspconfig <span class="p">=</span> require<span class="p">(</span><span class="s1">'lspconfig'</span><span class="p">)</span>
  lspconfig<span class="p">.</span>sourcekit<span class="p">.</span>setup<span class="p">{}</span>
EOF
</code></pre></div></div>

<h4 id="rename-current-file">Rename current file</h4>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">function</span><span class="p">!</span> RenameFile<span class="p">()</span>
    <span class="k">let</span> old_name <span class="p">=</span> <span class="nb">expand</span><span class="p">(</span><span class="s1">'%'</span><span class="p">)</span>
    <span class="k">let</span> new_name <span class="p">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">'New file name: '</span><span class="p">,</span> <span class="nb">expand</span><span class="p">(</span><span class="s1">'%'</span><span class="p">),</span> <span class="s1">'file'</span><span class="p">)</span>
    <span class="k">if</span> new_name <span class="p">!=</span> <span class="s1">''</span> &amp;&amp; new_name <span class="p">!=</span> old_name
        exec <span class="s1">':saveas '</span> <span class="p">.</span> new_name
        exec <span class="s1">':silent !rm '</span> <span class="p">.</span> old_name
        exec <span class="s1">':bd '</span> <span class="p">.</span> old_file
        <span class="k">redraw</span><span class="p">!</span>
    <span class="k">endif</span>
<span class="k">endfunction</span>
<span class="nb">map</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">n</span> <span class="p">:</span><span class="k">call</span> RenameFile<span class="p">()&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</code></pre></div></div>

<!--
### Navigation in Vimr
- jump to the next empty line (the next paragraph)`}` 
* Recording macros
    * `"xp` pastes the contents of the register `x`.


* `~ `      : invert case (upper->lower; lower->upper) of current character
* `gf `     : open file name under cursor (SUPER)

* `ggg?G`  : rot13 whole file
* `xp`      : swap next two characters around
* `CTRL-A,CTRL-X` : increment, decrement next number on same line as the cursor
* `CTRL-R=5*5`    : insert 25 into text



* `'.`       : jump to last modification line (SUPER)
* *`.*       : jump to exact spot in last modification line
* `<C-O>`    : retrace your movements in file (backward)
* `<C-I>`    : retrace your movements in file (forward)
* `:ju(mps)` : list of your movements 
:history : list of all your commands


 Sorting with external sort
:%!sort -u           : contents of the current file is sorted and only unique lines are kept
:'v,'w!sort          : sort from line marked v thru lines marked w
:g/^$/;,/^$/-1!sort  : sort each block (note the crucial ;)

!1} sort             : sorts paragraph; this is issued from normal mode!)

:wn           : write file and move to next (SUPER)
:bd           : remove file from buffer list (SUPER)
:sav php.html : Save current file as php.html and "move" to php.html
:w /some/path/%:r   : save file in another directory, but with the same name
:e #          : edit alternative file
:args         : display argument list
:n            : next file in argument list
:prev         : previous file in argument list
:rew          : rewind to first file in argument list
:ls           : display buffer list
:bn           : next buffer
:bp           : previous buffer
:brew         : rewind to first buffer in buffer list
:tabe         : open new tab page (Ctrl-PgUp, Ctrl-PgDown for next/previous tab)
:tabm n       : move tab to position n (0=leftmost position)

# editing a register/recording
"ap
<you can now see register contents, edit as required>
"add
@a




Ctrl-D  move half-page down
Ctrl-U  move half-page up
Ctrl-B  page up
Ctrl-F  page down
Ctrl-O  jump to last (older) cursor position
Ctrl-I  jump to next cursor position (after Ctrl-O)
Ctrl-Y  move view pane up
Ctrl-E  move view pane down

n   next matching search pattern
N   previous matching search pattern


g*  next matching search (not whole word) pattern under cursor
g#  previous matching search (not whole word) pattern under cursor

de — Delete to the end of the word
^R= — Insert the contents of the special = register, which accepts an expression to evaluate

gUgn - uppercase
gn
n move to the next match


Undo and redo

You can use u to undo the last change. CTRL-R redoes a change that has been undone. U returns the current line to its original state.
You can use g- or g+ to go between text-states. 
Search and replace
* `\vpattern` - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)
* `n` - repeat search in same direction
* `N` - repeat search in opposite direction

* `:noh` - remove highlighting of search matches
Search in multiple files
* `:vimgrep /pattern/ {file}` - search for pattern in multiple files

* e.g. `:vimgrep /foo/ **/*`
* `:cn` - jump to the next match
* `:cp` - jump to the previous match
* `:copen` - open a window containing the list of matches


folding from selection
`: '<,'>fo`

`:help folding`

set foldmethod=syntax
`set foldlevel=1`
`set foldclose=all`


Sequence forfolding lines `Shift+V:fo`
`:set foldmethod=syntax` intent, 
`zo` unfolding
`za` toogle folding
`zf#j` creates a fold from the cursor down # lines.

:CheckHealth
-->]]></content><author><name></name></author><category term="software" /><summary type="html"><![CDATA[Symbols and meanings % → current file. An example: :so % → Source the current file $ → end of line . → Current line An example: :.!sh → Pipe current line to sh and replace it with the output]]></summary></entry><entry><title type="html">Git - notes</title><link href="http://localhost:4000/software/git-notes.html" rel="alternate" type="text/html" title="Git - notes" /><published>2020-04-26T00:00:00+02:00</published><updated>2020-04-26T00:00:00+02:00</updated><id>http://localhost:4000/software/git-notes</id><content type="html" xml:base="http://localhost:4000/software/git-notes.html"><![CDATA[<p>Squash the last three commits</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase <span class="nt">-i</span> HEAD~3
</code></pre></div></div>

<p>You will see something like this</p>

<pre><code class="language-plain">pick f392171 Added new feature X
pick ba9dd9a Added new elements to page design
pick df71a27 Updated CSS for new elements
</code></pre>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pick</code> <code class="language-plaintext highlighter-rouge">p</code> the commit will be taken</li>
  <li><code class="language-plaintext highlighter-rouge">squash</code> <code class="language-plaintext highlighter-rouge">s</code>, the commit will be blended with the above.</li>
</ul>

<p>Edit to something like this</p>

<pre><code class="language-plain">pick f392171 New message for this three commit!
squash ba9dd9a
squash df71a27
</code></pre>

<p>Now you can accept the change by continuing the rebase:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase <span class="nt">--continue</span>
</code></pre></div></div>

<p>After that you need to force override the history using this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin master <span class="nt">--force</span>
</code></pre></div></div>

<h2 id="squash-merge">Squash merge</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master
git merge <span class="nt">--squash</span> bugfix
git commit
</code></pre></div></div>

<h3 id="checkout-bare-repository">Checkout bare repository</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone --bare https://github.com/nextcloud/server.git /var/www/nextcloud.git --recursive

cd nextcloud.git; git worktree add /var/www/nextcloud
cd /var/www/nextcloud; checkout -f v27.1.4

git --work-tree=/var/www/nextcloud --git dir=/home/artur/pub/drive/repos/nextcloud.git checkout -f v27.1.4 --recursive
</code></pre></div></div>]]></content><author><name></name></author><category term="software" /><summary type="html"><![CDATA[Squash the last three commits]]></summary></entry><entry><title type="html">Linux installation</title><link href="http://localhost:4000/linux/installation.html" rel="alternate" type="text/html" title="Linux installation" /><published>2020-03-26T00:00:00+01:00</published><updated>2020-03-26T00:00:00+01:00</updated><id>http://localhost:4000/linux/installation</id><content type="html" xml:base="http://localhost:4000/linux/installation.html"><![CDATA[<p>In case of installation on VM make the disk image</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img create -f qcow2 debian.qcow2 16G
</code></pre></div></div>

<p>Other format option</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img create -f raw debian.raw 16G
-drive file=disk.raw,format=raw
</code></pre></div></div>

<p>Start the VM with <a href="https://github.com/clearlinux/common/raw/master/OVMF.fd">bios</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="nt">-bios</span> OVMF.fd <span class="nt">-m</span> 1G <span class="nt">-drive</span> <span class="nv">file</span><span class="o">=</span>debian.qcow2,format<span class="o">=</span>qcow2 <span class="se">\</span>
                   <span class="nt">-cdrom</span> debian-12.2.0-amd64-netinst.iso
</code></pre></div></div>

<p>Go through the installation process and then power off the VM</p>

<p>Start VM with command</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="nt">-bios</span> OVMF.fd <span class="nt">-m</span> 1G <span class="nt">-smp</span> 6 <span class="se">\</span>
                   <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::2222-:22 <span class="nt">-net</span> nic <span class="se">\</span>
                   <span class="nt">-drive</span> <span class="nv">file</span><span class="o">=</span>debian.qcow2,format<span class="o">=</span>qcow2
</code></pre></div></div>

<h2 id="prepare-install-media-on-macos">Prepare install media on macOS</h2>

<p>Insert and unmount an USB stick</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diskutil unmount /dev/disk2s1
</code></pre></div></div>

<p>Here is how we can list all the disks attached to the system</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diskutil list
</code></pre></div></div>

<p>Writing image to the USB device (notice that we do not write to a partition)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>archlinux-2021.01.01-x86_64.iso <span class="nv">of</span><span class="o">=</span>/dev/disk2
</code></pre></div></div>

<p>then  flush the data by ejecting the drive</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo sync
</span>diskutil eject /dev/disk2
</code></pre></div></div>

<h1 id="debian-sid">Debian sid</h1>

<p>This is the Debian setup where most of the examples shown on the website should work.</p>

<p>Download links:</p>

<!-- https://www.debian.org/CD/live/ -->

<ul>
  <li><a href="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.2.0-amd64-netinst.iso">amd64 - Install disc</a></li>
  <li><a href="https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/">amd64 - Live disc</a></li>
</ul>

<p>During installation select SSH server, standard system utilities and no desktop</p>

<h4 id="allowing-login-root-user-from-the-network">Allowing login root user from the network</h4>

<p>This is our testing installation, so we do not care about security, but easiness and convenience.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/ssh/sshd_config
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Ctrl-o</code> <code class="language-plaintext highlighter-rouge">Ctrl-x</code></p>

<p>Put this line in the file</p>
<pre><code class="language-plain">PermitRootLogin yes
</code></pre>

<p>and then</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart sshd
</code></pre></div></div>

<p>From now on you can log in to the VM using ssh connection</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh -p 2222 user@localhost
</code></pre></div></div>

<h3 id="making-it-the-sid">Making it the sid</h3>

<p>/etc/apt/sources.list</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb https://deb.debian.org/debian/ sid main contrib non-free non-free-firmware
deb-src https://deb.debian.org/debian/ sid main contrib non-free non-free-firmware
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt upgrade
apt dist-upgrade
apt autoremove

apt <span class="nb">install </span>firmware-linux-nonfree
</code></pre></div></div>

<h3 id="tools">Tools</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>neovim clang
</code></pre></div></div>

<p><strong>Swift</strong></p>

<p>Dependencies</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>build-essential libcurl4-openssl-dev binutils git gnupg2 libc6-dev <span class="se">\</span>
            libedit2 libsqlite3-0 libxml2-dev libz3-dev pkg-config tzdata <span class="se">\</span>
            tzdata unzip zlib1g-dev libgcc-9-dev libncurses-dev <span class="se">\</span>
            libstdc++-9-dev
</code></pre></div></div>

<p>Missing dependencies for Debian sid</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>libpython3.8 
</code></pre></div></div>

<p>Installed instead</p>

<pre><code class="language-plain">apt install libpython3.10-dev python3-clang python3-lldb
</code></pre>

<p>Downloading and installing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://download.swift.org/swift-5.9.1-release/ubuntu2204/swift-5.9.1-RELEASE/swift-5.9.1-RELEASE-ubuntu22.04.tar.gz

tar -xf swift-5.9.1-RELEASE-ubuntu22.04.tar.gz
mv swift-5.9.1-RELEASE-ubuntu22.04 /opt/swift-5.9.1
</code></pre></div></div>

<p>add this line to <code class="language-plaintext highlighter-rouge">/etc/profile</code> so the path will be added for all the users</p>

<pre><code class="language-plain">export PATH="$PATH:/opt/swift-5.9.1/usr/bin"
</code></pre>

<h1 id="archlinux">Archlinux</h1>

<p>Links:</p>
<ul>
  <li><a href="https://archlinux.org/releng/releases/">torrents with ISO files</a></li>
  <li><a href="https://geo.mirror.pkgbuild.com/iso/latest/">latest ISO version from HTTP mirror</a></li>
  <li><a href="https://wiki.archlinux.org/index.php/Offline_installation">Offline: Most recent installation guide</a></li>
  <li><a href="https://wiki.archlinux.org/title/installation_guideI">UEFI: Most recent installation guide</a></li>
</ul>

<h1 id="installation">Installation</h1>

<p>Note: in case case it is Mac mini. Hold alt (option)  button on boot up  and select the install disk.</p>

<p>Here are commands to check what discs are attached to the system</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/partitions
<span class="nb">ls</span> /dev/[s|x|v]d<span class="k">*</span>
lsblk
fdisk –l
<span class="nb">ls</span> /dev | <span class="nb">grep</span> ‘^[s|v|x][v|d]’<span class="nv">$*</span>
</code></pre></div></div>

<!--
The install disk has free space which we can use (for example to create install scripts in case we use the install disk several times)

    cfdisk /dev/sdb

Select thf freespace and hit `[New]` and `Enter` => `[Write]` => `enter` => `yes`  =>`Enter` => `[Quit]`

Now we have unformatted partition. To screate FAT32 execute this commend

   

Mount it as home folder
   mount /dev/sdb4 /root
   # and go to the new home root
   cd

   # this command was given by arch wiki but do not work for me
   # https://wiki.archlinux.org/index.php/FAT
   


Now I realized I can edit system, so the partition that I have just created I can mount on start. There are steps I took.

- On the USB stick there is prtition named Gap1. I remove it becouse it seems to not be needed. I use `gparted` for that.
- Shrink vfat partition to 8000 MiB and place it at the and.

- Crate partitions to look like this: `[1: 628.97MiB]` `[2: 2.2 GiB]` `[3: 59 MiB]` `[4: 4000 MiB]` `[5: 8000MiB]`
    1. `ARCH202101`: It is the oryginal partition ISO9660 I had after writing image
    2. Freespace that will might be used when I edit the first partition 
    3. The UEFI partition where is placed bootloader that starts sysyem that is located on the first partition. This partition comes form the orygunal image.
    4. `CHROOT`: This parition will contains files of the installer system. They are placed on Ext4 partition, so we can edit files and regenerate ISO file from it.
    5. Home folder for root user, so when we can write scripts, store files so we can use them in other instalation process. 

Now we copy read only files from read only system to writable partition
    
    sudo mount -o loop /media/artur/ARCH202101/arch/x86_64/airfs.sfs /mnt 
    sudo cp -T /mnt /media/artur/CHROOT
-->

<p>Update packages manager</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-Sy</span>
</code></pre></div></div>

<p>Make a partition table</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parted <span class="nt">-s</span> /dev/sda mktable GPT
</code></pre></div></div>

<h3 id="create-partitions">Create partitions</h3>

<p>In this case:</p>

<ul>
  <li>300MB  →  UEFI</li>
  <li>16GB  →  Swap</li>
  <li>Rest  →  System</li>
</ul>

<p>List all types of partitions</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sfdisk <span class="nt">-T</span>
</code></pre></div></div>

<h4 id="first-way-using-sfdisk">First way: Using <code class="language-plaintext highlighter-rouge">sfdisk</code></h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sfdisk /dev/sda <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
 ,300,ef
 ,16000,S,h
 ;
</span><span class="no">EOF
</span></code></pre></div></div>

<p>or pipe to the program like</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">',,c;'</span> | sfdisk /dev/sdd
</code></pre></div></div>

<h4 id="secund-way-using-fdisk">Secund way: Using <code class="language-plaintext highlighter-rouge">fdisk</code></h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fdisk /dev/sda <span class="o">&lt;&lt;</span> <span class="no">FDISK_CMDS</span><span class="sh">
g
n
1

+300MiB
t
1
n
2

+16GiB
t
2
19
n
3


t
3
20
w
</span><span class="no">FDISK_CMDS
</span></code></pre></div></div>

<h4 id="therd-way">Therd way</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cfdisk /dev/sda
</code></pre></div></div>

<p>Formatting</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs.fat <span class="nt">-F32</span> /dev/sda1
mkswap /dev/sda2
mkfs.ext4 /dev/sda3
</code></pre></div></div>

<p>Mounting partitions</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/sda3 /mnt
swapon /dev/sda2
</code></pre></div></div>

<p>Installing base packages</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacstrap /mnt base base-devel linux linux-firmware
</code></pre></div></div>

<p>Generate <code class="language-plaintext highlighter-rouge">fstab</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>genfstab <span class="nt">-U</span> <span class="nt">-p</span> /mnt <span class="o">&gt;&gt;</span> /mnt/etc/fstab
</code></pre></div></div>

<p>Chrooting</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arch-chroot /mnt <span class="o">&lt;&lt;</span> <span class="no">CHROOT</span><span class="sh">
	#commands
</span><span class="no">CHROOT
</span></code></pre></div></div>

<p>or just <code class="language-plaintext highlighter-rouge">arch-chroot /mnt</code> and then commands</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"archlinux"</span> <span class="o">&gt;</span> /etc/hostname
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/#en_US/en_US/g"</span> /etc/locale.gen
locale-gen
<span class="nb">echo </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8 <span class="o">&gt;</span> /etc/locale.conf
<span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
<span class="nb">ln</span> <span class="nt">-s</span> /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
hwclock <span class="nt">--systohc</span> <span class="nt">--utc</span>
</code></pre></div></div>

<h4 id="run-32bit-apps">Run 32bit apps</h4>

<p>open  → <code class="language-plaintext highlighter-rouge">/etc/pacman.conf</code> and uncomment <code class="language-plaintext highlighter-rouge">[multilib]</code> section</p>

<p>Installing additional software</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-Syu</span>
pacman <span class="nt">-S</span> zsh <span class="nt">--noconfirm</span>
</code></pre></div></div>

<h4 id="setup-users">Setup users</h4>

<p>Set password for root</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passwd
</code></pre></div></div>

<p>Create user</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>useradd <span class="nt">-mg</span> <span class="nb">users</span> <span class="nt">-G</span> wheel,storage,power <span class="nt">-s</span> /usr/bin/zsh user
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>passwd user
</code></pre></div></div>

<p>You can force user to change password</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chage <span class="nt">-d</span> 0 user
</code></pre></div></div>

<p>sudoers</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>visudo
</code></pre></div></div>

<p>or</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;&gt;</span> /etc/sudoers <span class="o">&lt;&lt;</span><span class="no">EOL</span><span class="sh">
%wheel ALL=(ALL) NOPASSWD: ALL
</span><span class="no">EOL
</span></code></pre></div></div>

<h3 id="setting-up-bootloader">Setting up bootloader</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman <span class="nt">-S</span> grub efibootmgr dosfstools os-prober mtools <span class="nt">--noconfirm</span>
<span class="nb">mkdir</span> /boot/EFI
mount /dev/sda1 /boot/EFI
grub-install <span class="nt">--target</span><span class="o">=</span>x86_64-efi <span class="nt">--efi-directory</span><span class="o">=</span>EFI <span class="nt">--bootloader-id</span><span class="o">=</span>grub_uefi <span class="nt">--recheck</span>

grub-mkconfig <span class="nt">-o</span> /boot/grub/grub.cfg
</code></pre></div></div>

<p>then <code class="language-plaintext highlighter-rouge">exit</code> and</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">umount -a</code></li>
  <li><code class="language-plaintext highlighter-rouge">poweroff</code></li>
</ul>

<!--
## More customisation

#### DHCP

```
pacman -S dhcpcd --noconfirm
```

```s
systemctl enable dhcpcd
systemctl start dhcpcd
```

```bash
dhcpcd enp3s0f0
```

```
ip a

ping -c2 google.com
```

## Sway

```bash
pacman -S git meson wlroots wayland wayland-protocols \
              pcre2 json-c pango cairo gdk-pixbuf2
```

```bash
git clone https://github.com/swaywm/sway.git
```

building 

```bash
git checkout v1.8
```

Disable waring as errors in  `meson.build` 10 line `'werror=false'`

```bash
meson build/
ninja -C build/
sudo ninja -C build/ install
```

# Interesting software

- zathura - PDF reader
- poppler => gives pdftotext



# Building own environment (inside QEMU) - Archlinux

```bash
pacman -S qemu-guest-agent
systemctl enable --now qemu-guest-agent
```

### install software to build and run

```bash
pacman -S egl-wayland meson wlroots wayland wayland-protocols pcre2 json-c pango cairo gdk-pixbuf2 scdoc cmake less xorg-xwayland xdg-desktop-portal-wlr xdg-desktop-portal-gtk ttf-bitstream-vera gnu-free-fonts noto-fonts ttf-croscore ttf-dejavu ttf-droid ttf-ibm-plex ttf-liberation xorg
```

```bash
git clone https://github.com/swaywm/sway.git
cd sway/
git checkout v1.8

meson build/
ninja -C build/
sudo ninja -C build/ install
```


# Building own environment (inside QEMU) - Debian



```
apt install -y libnvidia-egl-wayland-dev   meson libwlroots-dev wayland-utils wayland-protocols libpcre2-dev libjson-c-dev \
  libpango-1.0-0 libpangocairo-1.0-0 libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev scdoc cmake xwayland bochs bochs-sdl bochs-term  bochs-wx bochs-x \
  vgabios xscreensaver-gl xscreensaver-gl-extra mesa-vulkan-drivers mesa-utils-bin mesa-utils mesa-drm-shim mesa-common-dev \
  libglx-mesa0 libglw1-mesa-dev libgl1-mesa-dri libglapi-mesa libgl1-mesa-dri libgbm-dev weston libweston-12-dev curl htop \
  openssh-server neovim zsh ruby python3 cmake rust-all ruby-dev ruby-full build-essential npm r-base r-base-dev fzf rclone \
  rtorrent htop bundler neomutt golang ghc cabal-install gulp npm neovim mc tree cmake scala maven imagemagick hexedit erlang \
  nasm binutils nim tmux wget httpie yarn meson util-linux ninja-build git fakeroot build-essential ncurses-dev xz-utils \
  libssl-dev bc flex libelf-dev bison python3-pip libisl-dev texinfo libmpfr-dev libmpc-dev libgmp3-dev genisoimage clang \
  libboost-tools-dev libboost-dev libboost-system-dev gcc g++ make pkg-config libgtk-3-dev libgstreamer1.0-dev \
  libgstreamer-plugins-base1.0-dev cmake ninja-build coreutils libxml2-dev libsqlite3-dev libicu-dev libxslt-dev libjpeg-dev \
  libpng-dev libwebp-dev libsecret-1-dev binutils git gnupg2 libc6-dev libcurl4 libedit2 libgcc-9-dev libsqlite3-0 libstdc++-9-dev \
  libxml2 libz3-dev pkg-config tzdata zlib1g-dev python3 apt-file libwayland-server++1 libwayland-server0 freerdp2-dev \
  freerdp2-wayland libpam-freerdp2-dev libavutil-dev libavcodec-dev libavutil-dev libavformat-dev fossil krusader texlive-full \
  openssh-server neovim zsh ruby python3 cmake binutils git gnupg2 libc6-dev libcurl4 libedit2 libgcc-9-dev libsqlite3-0 \
  libstdc++-9-dev libxml2 libz3-dev pkg-config tzdata zlib1g-dev python3 rust-all ruby-dev ruby-full build-essential npm \
  r-base r-base-dev fzf rclone rtorrent htop bundler neomutt golang ghc cabal-install gulp npm neovim mc tree cmake scala \
  maven imagemagick hexedit erlang nasm  binutils nim  tmux wget httpie  yarn meson util-linux ninja-build python3-pip libisl-dev \
  texinfo libmpfr-dev libmpc-dev libgmp3-dev genisoimage clang libboost-tools-dev libboost-dev libboost-system-dev git fakeroot \
  build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison gcc g++ make pkg-config cmake ninja-build \
  coreutils  libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libxml2-dev libsqlite3-dev libicu-dev libxslt-dev \
  libjpeg-dev libpng-dev libwebp-dev libsecret-1-dev
```
-->]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[In case of installation on VM make the disk image]]></summary></entry><entry><title type="html">SOLID principles</title><link href="http://localhost:4000/programming/solid.html" rel="alternate" type="text/html" title="SOLID principles" /><published>2020-02-26T00:00:00+01:00</published><updated>2020-02-26T00:00:00+01:00</updated><id>http://localhost:4000/programming/solid</id><content type="html" xml:base="http://localhost:4000/programming/solid.html"><![CDATA[<h3 id="single-responsibility-principle">Single responsibility principle</h3>

<p>This mean if the one thing in specification is changed you only need to change the code in the single place or class</p>

<h3 id="openclosed-principle">Open/closed principle</h3>

<p>Software should be open for extension, but closed for modification.</p>

<h3 id="liskov-substitution-principle">Liskov substitution principle</h3>

<p>Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.</p>

<h3 id="interface-segregation-principle">Interface segregation principle</h3>

<p>The interfaces should be small and provide as little methods as possible.</p>

<h3 id="dependency-inversion-principle">Dependency inversion principle</h3>

<p>The lower module must not depends on higher module. In order to achieve this the code must to relay on abstractions (in other words the code has to use interfaces/protocols)</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Single responsibility principle]]></summary></entry><entry><title type="html">Bridging between languages</title><link href="http://localhost:4000/programming/bridging.html" rel="alternate" type="text/html" title="Bridging between languages" /><published>2020-02-26T00:00:00+01:00</published><updated>2020-02-26T00:00:00+01:00</updated><id>http://localhost:4000/programming/bridging</id><content type="html" xml:base="http://localhost:4000/programming/bridging.html"><![CDATA[<p>We can cross call functions from languages that:</p>

<ul>
  <li>Both are compilable → Strategy: Create a binary library and call function from it.</li>
  <li>Library in <code class="language-plaintext highlighter-rouge">interpreted</code> and the project in <code class="language-plaintext highlighter-rouge">compiled</code> → Strategy: Create an interpreter context, then load the files and execute them.</li>
  <li>Library in <code class="language-plaintext highlighter-rouge">compiled</code> and the project in <code class="language-plaintext highlighter-rouge">interpreted</code> → Strategy: Use <code class="language-plaintext highlighter-rouge">FFI</code>.</li>
  <li>Both are interpreted
    <ul>
      <li>Probably give up. Bridging will be possible, but messy and complicated</li>
      <li>Create two programs and exchange data between them using pipe, sockets, message quesues, databses etc.</li>
    </ul>
  </li>
</ul>

<h3 id="creating-shared-and-static-library-in-go">Creating shared and static library in Go</h3>

<p>An example code that is shared <a href="https://github.com/artur-gurgul/codebook"><code class="language-plaintext highlighter-rouge">example.go</code></a>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"C"</span>
<span class="k">import</span> <span class="s">"fmt"</span>

<span class="c">//export SayHello</span>
<span class="k">func</span> <span class="n">SayHello</span><span class="p">(</span><span class="n">hello</span> <span class="o">*</span><span class="n">C</span><span class="o">.</span><span class="n">char</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">GoString</span><span class="p">(</span><span class="n">hello</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">main</code> function is neccecery to include into library, because the final product has to have for example the GC rutines.</li>
  <li>The comment starting from <code class="language-plaintext highlighter-rouge">//export {function name}</code> tells the comiler that this the function will be called from the outside.</li>
</ul>

<h4 id="creating-static-library">Creating static library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build -o example.a -buildmode=c-archive example.go
</code></pre></div></div>

<h4 id="creating-dynamic-library">Creating dynamic library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build -o example.dylib -buildmode=c-shared example.go
</code></pre></div></div>

<h3 id="creating-shared-and-static-library-in-swift">Creating shared and static library in Swift</h3>

<p><code class="language-plaintext highlighter-rouge">point.swift</code></p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>and compile with command (module name is optional)</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc point.swift <span class="nt">-emit-module</span>  -module-name Point <span class="nt">-emit-library</span> <span class="nt">-static</span>
</code></pre></div></div>

<p><strong>Using</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Point</span>

<span class="k">let</span> <span class="nv">p</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Hello library!"</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<p>compile with</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc main.swift <span class="nt">-L</span> ./lib/ <span class="nt">-I</span> ./lib/ <span class="nt">-lpoint</span>
</code></pre></div></div>

<h4 id="dynamic-library-in-swift">Dynamic library in Swift</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc point.swift -emit-module -emit-library
</code></pre></div></div>

<p>it produces</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">libpoint.a</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftdoc</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftmodule</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftsourceinfo</code></li>
</ul>

<p>Compile main program the same way as it has been down with the static one</p>

<p>Library searching paths <code class="language-plaintext highlighter-rouge">/usr/lib/</code>, <code class="language-plaintext highlighter-rouge">/usr/local/lib/</code> </p>

<p><strong><em>Create package that emits library</em></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:5.3</span>
<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">package</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">/// type: automatic, based on the environment</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span> 
		         <span class="c1">// type: .dynamic, .static</span>
		         <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"MyLibrary"</span><span class="p">]</span>
        <span class="p">),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span> <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="calling-function-from-library-in-go">Calling function from library in Go</h3>

<p>First off we will create C++ library that we will use in out Go program.
File <code class="language-plaintext highlighter-rouge">example.cxx</code>:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>

<span class="kt">void</span> <span class="n">PrintHello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">u</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">}</span></code></pre></figure>

<p>And <code class="language-plaintext highlighter-rouge">example.hxx</code>:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#pragma once
</span><span class="kt">void</span> <span class="n">PrintHello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">u</span><span class="p">)</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">extern "C" {}</code> informs the compiler that we want the function names to be preserved. That is, to not “mangle” the names as is done for C++ code:</p>

<h4 id="creating-static-library-1">Creating static library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ -c -Wall -o lib.o ./example.cxx
ar rc ./libexample.a ./lib.o
</code></pre></div></div>

<h4 id="creating-dynamic-library-1">Creating dynamic library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ -dynamiclib -o libexample.dylib example.cxx
</code></pre></div></div>

<h2 id="statically-linking-an-example-library-in-go">Statically linking an example library in Go</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="c">// #cgo CFLAGS: -I.</span>
<span class="c">// #cgo LDFLAGS: -L. -lexample</span>
<span class="c">//</span>
<span class="c">// #include &lt;example.hxx&gt;</span>
<span class="k">import</span> <span class="s">"C"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">C</span><span class="o">.</span><span class="n">PrintHello</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">CString</span><span class="p">(</span><span class="s">"Hello Golang"</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The program is linked staticaly with libexample when you build it.</p>

<h4 id="example-of-using-library-with-ffi-in-ruby">Example of using library with FFI in Ruby</h4>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">gem <span class="nb">install </span>ffi</code></pre></figure>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'ffi'</span>
<span class="k">module</span> <span class="nn">Example</span>
  <span class="kp">extend</span> <span class="no">FFI</span><span class="o">::</span><span class="no">Library</span>
  <span class="n">ffi_lib</span> <span class="s1">'./example.dylib'</span>
  <span class="n">attach_function</span> <span class="ss">:SayHello</span><span class="p">,</span> <span class="p">[</span><span class="ss">:string</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Example</span><span class="o">.</span><span class="no">SayHello</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">)</span>
</code></pre></div></div>

<p>More informations about FFI: <a href="https://en.wikipedia.org/wiki/Foreign_function_interface">https://en.wikipedia.org/wiki/Foreign_function_interface</a></p>

<h4 id="call-shared-library-from-python">Call shared library from Python</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ctypes</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="p">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'./example.dylib'</span><span class="p">)</span>
<span class="n">libc</span><span class="p">.</span><span class="n">SayHello</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="interesting-websites">Interesting websites</h2>

<ul>
  <li><a href="https://blog.filippo.io/building-python-modules-with-go-1-5/">https://blog.filippo.io/building-python-modules-with-go-1-5/</a></li>
  <li><a href="https://id-rsa.pub/post/go15-calling-go-shared-libs-from-firefox-addon/">https://id-rsa.pub/post/go15-calling-go-shared-libs-from-firefox-addon/</a></li>
</ul>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[We can cross call functions from languages that:]]></summary></entry><entry><title type="html">Javascript - notes</title><link href="http://localhost:4000/programming/javascript-notes.html" rel="alternate" type="text/html" title="Javascript - notes" /><published>2020-02-11T00:00:00+01:00</published><updated>2020-02-11T00:00:00+01:00</updated><id>http://localhost:4000/programming/javascript-notes</id><content type="html" xml:base="http://localhost:4000/programming/javascript-notes.html"><![CDATA[<h3 id="currying---javascript">Currying - JavaScript</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">currying</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(...</span><span class="nx">_arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">fn</span><span class="p">(...</span><span class="nx">args</span><span class="p">,</span> <span class="p">...</span><span class="nx">_arg</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">currying</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="advanced-implementation">Advanced implementation</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span> <span class="nx">curried</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args2</span><span class="p">)</span> <span class="p">{</span> 
                <span class="k">return</span> <span class="nx">curried</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">args2</span><span class="p">))</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Usage</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">curriedSum</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>

<span class="c1">// Callable normally</span>
<span class="nx">curriedSum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> 

<span class="c1">// Currying of 1st argument</span>
<span class="nx">curriedSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> 

<span class="c1">// Currying all arguments</span>
<span class="nx">curriedSum</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="closures">Closures</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">NextClosure</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">a</span><span class="o">++</span>
        <span class="k">return</span> <span class="nx">a</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">NextClosure</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="manipulating-svg">Manipulating SVG</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span> <span class="na">id=</span><span class="s">"display"</span> <span class="na">width=</span><span class="s">"50"</span> <span class="na">height=</span><span class="s">"50"</span> <span class="na">style=</span><span class="s">"background-color: aqua;"</span><span class="nt">&gt;&lt;/svg&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElementNS</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://www.w3.org/2000/svg</span><span class="dl">"</span><span class="p">,</span> <span class="dl">'</span><span class="s1">rect</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">x</span><span class="dl">"</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">y</span><span class="dl">"</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">width</span><span class="dl">"</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">height</span><span class="dl">"</span><span class="p">,</span><span class="mi">25</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">fill</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">display</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">display</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">display</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Currying - JavaScript]]></summary></entry><entry><title type="html">Swift - notes</title><link href="http://localhost:4000/swift/swift-notes.html" rel="alternate" type="text/html" title="Swift - notes" /><published>2020-01-26T00:00:00+01:00</published><updated>2020-01-26T00:00:00+01:00</updated><id>http://localhost:4000/swift/swift-notes</id><content type="html" xml:base="http://localhost:4000/swift/swift-notes.html"><![CDATA[<h4 id="autoclosure">Autoclosure</h4>

<p>Lazy evaluation of the function’s arguments. Instead of eager calculation of values, the clousure is passed, and executed only when needed.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="n">_</span> <span class="nv">closure</span><span class="p">:</span> <span class="kd">@autoclosure</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">&lt;</span><span class="err">#</span><span class="kt">Code</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">}</span>

<span class="nf">test</span><span class="p">(</span><span class="mi">8</span><span class="o">==</span><span class="mi">9</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="destructuring-assignment">Destructuring Assignment</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="p">(</span><span class="nv">name</span><span class="p">,</span> <span class="nv">surname</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="s">"Artur"</span><span class="p">,</span> <span class="s">"Gurgul"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="checking-if-value-is-in-range">Checking if value is in range</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">i</span> <span class="o">=</span> <span class="mi">101</span>
<span class="k">if</span> <span class="k">case</span> <span class="mi">100</span><span class="o">...</span><span class="mi">101</span> <span class="o">=</span> <span class="n">i</span> <span class="p">{</span>
    <span class="o">&lt;</span><span class="err">#</span><span class="kt">Code</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="mi">100</span><span class="o">...</span><span class="mi">101</span><span class="p">)</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">&lt;</span><span class="err">#</span><span class="kt">Code</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="accessing-tuple-values">Accessing tuple values</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="s">"value1"</span><span class="p">,</span> <span class="s">"value2"</span><span class="p">)</span><span class="o">.</span><span class="mi">0</span>
</code></pre></div></div>

<h4 id="pattern-matching">Pattern matching</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Example</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">first</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">secund</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">example</span><span class="p">:</span> <span class="kt">Example</span> <span class="o">=</span> <span class="o">.</span><span class="nf">first</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="n">example</span> <span class="p">{</span>
<span class="k">case</span> <span class="o">.</span><span class="nf">first</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">),</span> <span class="o">.</span><span class="nf">secund</span><span class="p">(</span><span class="k">let</span> <span class="nv">value</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">if</span> <span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">first</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">=</span> <span class="n">example</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>print odd numbers</em></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">100</span> <span class="k">where</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>

<span class="p">}</span> 
</code></pre></div></div>

<h4 id="blurable-view-in-uikit">Blurable view in UIKit</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Blurable</span> <span class="k">where</span> <span class="k">Self</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="kd">func</span> <span class="nf">addBlur</span><span class="p">(</span><span class="n">_</span> <span class="nv">alpha</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">let</span> <span class="nv">effect</span> <span class="o">=</span> <span class="kt">UIBlurEffect</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">prominent</span><span class="p">)</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">let</span> <span class="nv">effectView</span> <span class="o">=</span> <span class="kt">UIVisualEffectView</span><span class="p">(</span><span class="nv">effect</span><span class="p">:</span> <span class="n">effect</span><span class="p">)</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">effectView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">bounds</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">effectView</span><span class="o">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="p">[</span><span class="o">.</span><span class="n">flexibleWidth</span><span class="p">,</span> <span class="o">.</span><span class="n">flexibleHeight</span><span class="p">]</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">effectView</span><span class="o">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">effectView</span><span class="p">)</span>
<span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">BackgroundView</span><span class="p">:</span> <span class="kt">Blurable</span> <span class="p">{}</span>
</code></pre></div></div>

<h2 id="difference-between-observedobject-state-and-environmentobject">Difference between <code class="language-plaintext highlighter-rouge">@ObservedObject</code>, <code class="language-plaintext highlighter-rouge">@State</code>, and <code class="language-plaintext highlighter-rouge">@EnvironmentObject</code></h2>

<p><a href="https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject">https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject</a></p>

<blockquote>
  <ul>
    <li>Use <code class="language-plaintext highlighter-rouge">@State</code> for simple properties that belong to a single view. They should usually be marked <code class="language-plaintext highlighter-rouge">private</code>.</li>
    <li>Use <code class="language-plaintext highlighter-rouge">@ObservedObject</code> for complex properties that might belong to several views. Most times you’re using a reference type you should be using <code class="language-plaintext highlighter-rouge">@ObservedObject</code> for it.</li>
    <li>Use <code class="language-plaintext highlighter-rouge">@StateObject</code> once for each observable object you use, in whichever part of your code is responsible for creating it.</li>
    <li>Use <code class="language-plaintext highlighter-rouge">@EnvironmentObject</code> for properties that were created elsewhere in the app, such as shared data.</li>
  </ul>
</blockquote>

<h3 id="cold-vs-hot-observables">Cold vs hot observables</h3>

<p>From: Anton Moiseev’s Book <a href="https://www.manning.com/books/angular-development-with-typescript-second-edition">“Angular Development with Typescript, Second Edition.”</a> :</p>

<blockquote>
  <p><strong>Hot and cold observables</strong></p>

  <p>There are <strong>two</strong> types of <strong>observables</strong>: hot and cold. The main difference is that a <strong>cold observable</strong> <strong>creates</strong> a <strong>data producer</strong> for <strong>each subscriber</strong>, whereas a <strong>hot observable creates</strong> a <strong>data producer first</strong>, and <strong>each subscriber</strong> gets the <strong>data</strong> from <strong>one producer</strong>, <strong>starting</strong> from <strong>the moment of</strong> <strong>subscription</strong>.</p>

  <p>Let’s compare watching a <strong>movie</strong> on <strong>Netflix</strong> to going into a <strong>movie theater</strong>. Think of yourself as an <strong>observer</strong>. Anyone who decides to watch Mission: Impossible on Netflix will get the entire movie, regardless of when they hit the play button. Netflix creates a new <strong>producer</strong> to stream a movie just for you. This is a <strong>cold observable</strong>.</p>

  <p>If you go to a movie theater and the showtime is 4 p.m., the producer is created at 4 p.m., and the streaming begins. If some people (<strong>subscribers</strong>) are late to the show, they miss the beginning of the movie and can only watch it starting from the moment of arrival. This is a <strong>hot observable</strong>.</p>

  <p>A <strong>cold observable</strong> starts producing data when some code invokes a <strong>subscribe()</strong> function on it. For example, your app may declare an observable providing a URL on the server to get certain products. The request will be made only when you subscribe to it. If another script makes the same request to the server, it’ll get the same set of data.</p>

  <p>A <strong>hot observable</strong> produces data even if no subscribers are interested in the data. For example, an accelerometer in your smartphone produces data about the position of your device, even if no app subscribes to this data. A server can produce the latest stock prices even if no user is interested in this stock.</p>
</blockquote>

<h1 id="interesting-snippets">Interesting snippets</h1>

<!-- https://swiftbysundell.com/articles/swiftui-views-versus-modifiers/ -->

<h1 id="view-modifier">View modifier</h1>

<p>The notification we’ll send when a shake gesture happens.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIDevice</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">deviceDidShakeNotification</span> <span class="o">=</span> <span class="kt">Notification</span>
                                              <span class="o">.</span><span class="kt">Name</span><span class="p">(</span><span class="nv">rawValue</span><span class="p">:</span> <span class="s">"deviceDidShakeNotification"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Override the default behavior of shake gestures to send our notification instead.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIWindow</span> <span class="p">{</span>
     <span class="kd">open</span> <span class="k">override</span> <span class="kd">func</span> <span class="nf">motionEnded</span><span class="p">(</span><span class="n">_</span> <span class="nv">motion</span><span class="p">:</span> <span class="kt">UIEvent</span><span class="o">.</span><span class="kt">EventSubtype</span><span class="p">,</span> <span class="n">with</span> <span class="nv">event</span><span class="p">:</span> <span class="kt">UIEvent</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">motion</span> <span class="o">==</span> <span class="o">.</span><span class="n">motionShake</span> <span class="p">{</span>
            <span class="kt">NotificationCenter</span>
                <span class="o">.</span><span class="k">default</span>
                <span class="o">.</span><span class="nf">post</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">UIDevice</span><span class="o">.</span><span class="n">deviceDidShakeNotification</span><span class="p">,</span> <span class="nv">object</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">}</span>
     <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A view modifier that detects shaking and calls a function of our choosing.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DeviceShakeViewModifier</span><span class="p">:</span> <span class="kt">ViewModifier</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span>

    <span class="kd">func</span> <span class="nf">body</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">Content</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="n">content</span>
            <span class="o">.</span><span class="nf">onAppear</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">onReceive</span><span class="p">(</span><span class="kt">NotificationCenter</span>
                           <span class="o">.</span><span class="k">default</span>
                           <span class="o">.</span><span class="nf">publisher</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">UIDevice</span><span class="o">.</span><span class="n">deviceDidShakeNotification</span><span class="p">))</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
                               <span class="nf">action</span><span class="p">()</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A View extension to make the modifier easier to use.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShake</span><span class="p">(</span><span class="n">perform</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">modifier</span><span class="p">(</span><span class="kt">DeviceShakeViewModifier</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="n">action</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>An example view that responds to being shaken</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Shake me!"</span><span class="p">)</span>
            <span class="o">.</span><span class="n">onShake</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Device shaken!"</span><span class="p">)</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="swizzling">Swizzling</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="kd">func</span> <span class="nf">newViewDidAppear</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"View appeared"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="k">let</span> <span class="nv">swizzling</span><span class="p">:</span> <span class="kt">Void</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span>
                                                 <span class="cp">#selector(UIViewController.viewDidLoad))</span>
    <span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span>
                                                 <span class="cp">#selector(UIViewController.newViewDidAppear))</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="n">originalMethod</span><span class="p">,</span> <span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="n">swizzledMethod</span> <span class="p">{</span>
        <span class="nf">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}()</span>
</code></pre></div></div>

<h1 id="class-vs-static-values">class vs static values</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Car</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">start</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">100</span>
    <span class="p">}</span>

    <span class="kd">class</span> <span class="k">var</span> <span class="nv">stop</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Student</span><span class="p">:</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="c1">// Not allowed</span>
    <span class="c1">// override static var start: Int {</span>
    <span class="c1">//    return 150</span>
    <span class="c1">// }</span>

    <span class="k">override</span> <span class="kd">class</span> <span class="k">var</span> <span class="nv">stop</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">5</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="always-publisher-example">Always Publisher example</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">Always</span><span class="o">&lt;</span><span class="kt">Output</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">Publisher</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">typealias</span> <span class="kt">Failure</span> <span class="o">=</span> <span class="kt">Never</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">output</span><span class="p">:</span> <span class="kt">Output</span>

    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">output</span><span class="p">:</span> <span class="kt">Output</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">output</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">func</span> <span class="n">receive</span><span class="o">&lt;</span><span class="kt">S</span><span class="p">:</span> <span class="kt">Subscriber</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">subscriber</span><span class="p">:</span> <span class="kt">S</span><span class="p">)</span>
                <span class="k">where</span> <span class="kt">S</span><span class="o">.</span><span class="kt">Input</span> <span class="o">==</span> <span class="kt">Output</span><span class="p">,</span> <span class="kt">S</span><span class="o">.</span><span class="kt">Failure</span> <span class="o">==</span> <span class="kt">Failure</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">subscription</span> <span class="o">=</span> <span class="kt">Subscription</span><span class="p">(</span><span class="nv">output</span><span class="p">:</span> <span class="n">output</span><span class="p">,</span> 
                                        <span class="nv">subscriber</span><span class="p">:</span> <span class="n">subscriber</span><span class="p">)</span>
        <span class="n">subscriber</span><span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">subscription</span><span class="p">:</span> <span class="n">subscription</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">extension</span> <span class="kt">Always</span> <span class="p">{</span>
    <span class="kd">final</span> <span class="kd">class</span> <span class="kt">Subscription</span><span class="o">&lt;</span><span class="kt">S</span><span class="p">:</span> <span class="kt">Subscriber</span><span class="o">&gt;</span> 
                <span class="k">where</span> <span class="kt">S</span><span class="o">.</span><span class="kt">Input</span> <span class="o">==</span> <span class="kt">Output</span><span class="p">,</span> <span class="kt">S</span><span class="o">.</span><span class="kt">Failure</span> <span class="o">==</span> <span class="kt">Failure</span> <span class="p">{</span>
        <span class="kd">private</span> <span class="k">let</span> <span class="nv">output</span><span class="p">:</span> <span class="kt">Output</span>
        <span class="kd">private</span> <span class="k">var</span> <span class="nv">subscriber</span><span class="p">:</span> <span class="kt">S</span><span class="p">?</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">output</span><span class="p">:</span> <span class="kt">Output</span><span class="p">,</span> <span class="nv">subscriber</span><span class="p">:</span> <span class="kt">S</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">output</span>
        <span class="k">self</span><span class="o">.</span><span class="n">subscriber</span> <span class="o">=</span> <span class="n">subscriber</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Always</span><span class="o">.</span><span class="kt">Subscription</span><span class="p">:</span> <span class="kt">Cancellable</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">cancel</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">subscriber</span> <span class="o">=</span> <span class="kc">nil</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Always</span><span class="o">.</span><span class="kt">Subscription</span><span class="p">:</span> <span class="kt">Subscription</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">request</span><span class="p">(</span><span class="n">_</span> <span class="nv">demand</span><span class="p">:</span> <span class="kt">Subscribers</span><span class="o">.</span><span class="kt">Demand</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">demand</span> <span class="o">=</span> <span class="n">demand</span>
    <span class="k">while</span> <span class="k">let</span> <span class="nv">subscriber</span> <span class="o">=</span> <span class="n">subscriber</span><span class="p">,</span> <span class="n">demand</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
      <span class="n">demand</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="n">demand</span> <span class="o">+=</span> <span class="n">subscriber</span><span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="buffered-publisher">Buffered publisher</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">publisher</span> <span class="o">=</span> <span class="kt">PassthroughSubject</span><span class="o">&lt;</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;</span><span class="p">()</span>
<span class="n">publisher</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">buffered</span> <span class="o">=</span> <span class="n">publisher</span><span class="o">.</span><span class="nf">buffer</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">prefetch</span><span class="p">:</span> <span class="o">.</span><span class="n">keepFull</span><span class="p">,</span> <span class="nv">whenFull</span><span class="p">:</span> <span class="o">.</span><span class="n">dropOldest</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="combine-publishers">Combine publishers</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">let</span> <span class="nv">publisher1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">publisher</span>
 <span class="k">let</span> <span class="nv">publisher2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">publisher</span>
</code></pre></div></div>

<p>Emits first and then second</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">let</span> <span class="nv">combinedPublisher</span> <span class="o">=</span> <span class="kt">Publishers</span>
                             <span class="o">.</span><span class="kt">Concatenate</span><span class="p">(</span><span class="nv">prefix</span><span class="p">:</span> <span class="n">publisher1</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">(),</span>
                                          <span class="nv">suffix</span><span class="p">:</span> <span class="n">publisher2</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">())</span>
</code></pre></div></div>

<p>Combine without ordering</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">combinedPublisher</span> <span class="o">=</span> <span class="kt">Publishers</span><span class="o">.</span><span class="kt">Merge</span><span class="p">(</span><span class="n">publisher1</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">(),</span>
                                         <span class="n">publisher2</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">())</span>
</code></pre></div></div>

<p><strong><em>Other operators worth to look at</em></strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Zip</code> - pair the emitted object, like a zip in the jacket</li>
  <li><a href="https://developer.apple.com/documentation/combine/publisher/combinelatest%28_:%29"><code class="language-plaintext highlighter-rouge">CombineLatest</code></a> - When <code class="language-plaintext highlighter-rouge">publisher1</code> and <code class="language-plaintext highlighter-rouge">publisher2</code> emitted some event then the latest values from each are taken and reemitted. From now on each change from either publisher is passed down.</li>
</ul>

<h4 id="example-of-zip">Example of zip</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">publisher</span>
<span class="k">let</span> <span class="nv">twos</span> <span class="o">=</span> <span class="nf">sequence</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> 
                    <span class="nv">next</span><span class="p">:</span> <span class="p">{</span><span class="n">_</span> <span class="k">in</span> <span class="mi">2</span><span class="p">})</span><span class="o">.</span><span class="n">publisher</span>
<span class="n">numbers</span>
	<span class="o">.</span><span class="nf">zip</span><span class="p">(</span><span class="n">twos</span><span class="p">)</span>
	<span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nf">pow</span><span class="p">(</span><span class="kt">Decimal</span><span class="p">(</span><span class="nv">$0</span><span class="p">),</span> <span class="nv">$1</span><span class="p">)</span> <span class="p">}</span>
	<span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span> <span class="n">p</span> <span class="k">in</span>
		<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
	<span class="p">})</span><span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="cancelling-a-publisher">Cancelling a publisher</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">timer</span> <span class="o">=</span> <span class="kt">Timer</span>
	<span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="nv">every</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="o">.</span><span class="n">main</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">common</span><span class="p">)</span>
	<span class="o">.</span><span class="nf">autoconnect</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">counter</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">subscriber</span> <span class="o">=</span> <span class="n">timer</span>
	<span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
	<span class="o">.</span><span class="n">sink</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
		<span class="k">if</span> <span class="n">counter</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="p">{</span>
			<span class="n">timer</span><span class="o">.</span><span class="n">upstream</span><span class="o">.</span><span class="nf">connect</span><span class="p">()</span><span class="o">.</span><span class="nf">cancel</span><span class="p">()</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>It will work similar to this</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subscriber</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="assign">Assign</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Dog</span> <span class="p">{</span>
	<span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">dog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">publisher</span> <span class="o">=</span> <span class="kt">Just</span><span class="p">(</span><span class="s">"Snow"</span><span class="p">)</span>
<span class="n">publisher</span><span class="o">.</span><span class="nf">assign</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span><span class="o">/.</span><span class="n">name</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="n">dog</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">MyModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
	<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">lastUpdated</span><span class="p">:</span> <span class="kt">Date</span> <span class="o">=</span> <span class="kt">Date</span><span class="p">()</span>
	<span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
		<span class="kt">Timer</span>
			<span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="nv">every</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="o">.</span><span class="n">main</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">common</span><span class="p">)</span>
			<span class="o">.</span><span class="nf">autoconnect</span><span class="p">()</span>
			<span class="o">.</span><span class="nf">assign</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="err">$</span><span class="n">lastUpdated</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">MyModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
	<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">model</span> <span class="o">=</span> <span class="kt">MyModel</span><span class="p">()</span>
<span class="kt">Just</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="nf">assign</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">model</span><span class="o">.</span><span class="err">$</span><span class="n">id</span><span class="p">)</span>
</code></pre></div></div>

<p>Here’s an example of using the <code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code> attribute in Swift:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@dynamicMemberLookup</span>
<span class="kd">struct</span> <span class="kt">DynamicStruct</span> <span class="p">{</span>
    <span class="nf">subscript</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"You accessed dynamic member '</span><span class="se">\(</span><span class="n">member</span><span class="se">)</span><span class="s">'"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">dynamicStruct</span> <span class="o">=</span> <span class="kt">DynamicStruct</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">dynamicStruct</span><span class="o">.</span><span class="n">someDynamicMember</span>
<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c1">// Output: "You accessed dynamic member 'someDynamicMember'"</span>
</code></pre></div></div>

<p>Key Value Coding</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SomeClass</span><span class="p">:</span> <span class="kt">NSObject</span> <span class="p">{</span>
  <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"Name"</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">object</span><span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="s">"name"</span><span class="p">)</span> <span class="k">as</span> <span class="kt">String</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">object</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="s">"New name"</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"name"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="create-map">Create map</h3>

<pre><code class="language-Swift">extension Sequence {
    func dictionay&lt;T&gt;(keyPath: KeyPath&lt;Element, T&gt;) -&gt; [T: Element] {
        var dictionary =  [T: Element]()
        
        for elemement in self {
            let key = elemement[keyPath: keyPath]
            dictionary[key] = elemement
        }
        
        return dictionary
    }
}
</code></pre>

<h3 id="swift---currying">Swift - currying</h3>

<p><a href="https://thoughtbot.com/blog/introduction-to-function-currying-in-swift">https://thoughtbot.com/blog/introduction-to-function-currying-in-swift</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="n">curry</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">,</span> <span class="kt">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span> <span class="p">{</span>
    <span class="p">{</span> <span class="n">a</span> <span class="k">in</span> <span class="p">{</span> <span class="n">b</span> <span class="k">in</span> <span class="p">{</span> <span class="n">c</span> <span class="k">in</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span>
    
<span class="kd">func</span> <span class="n">curry</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span> <span class="p">{</span>
    <span class="p">{</span> <span class="n">a</span> <span class="k">in</span> <span class="p">{</span> <span class="n">b</span> <span class="k">in</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="n">uncurry</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span> <span class="p">{</span>
    <span class="p">{</span> <span class="nf">f</span><span class="p">(</span><span class="nv">$0</span><span class="p">)(</span><span class="nv">$1</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="n">uncurry</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">,</span> <span class="kt">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span> <span class="p">{</span>
    <span class="p">{</span> <span class="nf">f</span><span class="p">(</span><span class="nv">$0</span><span class="p">)(</span><span class="nv">$1</span><span class="p">)(</span><span class="nv">$2</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="n">currying</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">A</span><span class="p">,</span> <span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">C</span> <span class="p">{</span>
    <span class="p">{</span> <span class="p">(</span><span class="nf">curry</span><span class="p">(</span><span class="n">f</span><span class="p">))(</span><span class="n">a</span><span class="p">)(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="n">currying</span><span class="o">&lt;</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">,</span> <span class="kt">D</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">A</span><span class="p">,</span> <span class="n">_</span> <span class="nv">f</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">A</span><span class="p">,</span> <span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">B</span><span class="p">,</span> <span class="kt">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">D</span> <span class="p">{</span>
    <span class="p">{</span> <span class="p">(</span><span class="nf">curry</span><span class="p">(</span><span class="n">f</span><span class="p">))(</span><span class="n">a</span><span class="p">)(</span><span class="nv">$0</span><span class="p">)(</span><span class="nv">$1</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="example-of-usage">Example of usage</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">add</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">c</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">adding</span> <span class="o">=</span> <span class="nf">curry</span><span class="p">(</span><span class="n">add</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">adding5</span> <span class="o">=</span> <span class="nf">uncurry</span><span class="p">(</span><span class="nf">adding</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div></div>

<p>or</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">adding5</span> <span class="o">=</span> <span class="nf">currying</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">add</span><span class="p">)</span>
</code></pre></div></div>

<p>then</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="nf">adding5</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="check-availability">Check availability</h2>

<p><a href="https://www.avanderlee.com/swift/available-deprecated-renamed/">https://www.avanderlee.com/swift/available-deprecated-renamed/</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="kd">#available(iOS 15, *)</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"This code only runs on iOS 15 and up"</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"This code only runs on iOS 14 and lower"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">guard</span> <span class="kd">#available(iOS 15, *)</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Returning if iOS 14 or lower"</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"This code only runs on iOS 15 and up"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@available</span><span class="p">(</span><span class="n">iOS</span> <span class="mi">14</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">NewAppIntroduction</span> <span class="p">{</span>
    <span class="c1">// ..</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@available</span><span class="p">(</span><span class="n">iOS</span><span class="p">,</span> <span class="nv">deprecated</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">obsoleted</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"We no longer show an app introduction on iOS 14 and up"</span><span class="p">)</span>
<span class="kd">@available</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">unavailable</span><span class="p">,</span> <span class="nv">renamed</span><span class="p">:</span> <span class="s">"launchOnboarding"</span><span class="p">)</span>
</code></pre></div></div>

<p>Mapping</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="n">maping</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">keyPath</span><span class="p">:</span> <span class="kt">KeyPath</span><span class="o">&lt;</span><span class="kt">Element</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Element</span><span class="p">]</span> <span class="p">{</span>
	<span class="k">var</span> <span class="nv">dictionary</span> <span class="o">=</span>  <span class="p">[</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Element</span><span class="p">]()</span>
	
	<span class="k">for</span> <span class="n">elemement</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
		<span class="k">let</span> <span class="nv">key</span> <span class="o">=</span> <span class="n">elemement</span><span class="p">[</span><span class="nv">keyPath</span><span class="p">:</span> <span class="n">keyPath</span><span class="p">]</span>
		<span class="n">dictionary</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">elemement</span>
	<span class="p">}</span>
	
	<span class="k">return</span> <span class="n">dictionary</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="type-aliases">Type aliases</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">typealias</span> <span class="kt">Point</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Numeric</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">T</span><span class="p">)</span>
<span class="kd">public</span> <span class="kd">typealias</span> <span class="kt">MyResult</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="kt">Result</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="swift" /><summary type="html"><![CDATA[Autoclosure]]></summary></entry><entry><title type="html">iOS Architecture Patterns</title><link href="http://localhost:4000/swift/ios-architecture-patterns.html" rel="alternate" type="text/html" title="iOS Architecture Patterns" /><published>2020-01-11T00:00:00+01:00</published><updated>2020-01-11T00:00:00+01:00</updated><id>http://localhost:4000/swift/ios-architecture-patterns</id><content type="html" xml:base="http://localhost:4000/swift/ios-architecture-patterns.html"><![CDATA[<h3 id="remove-story-board-dependency">Remove story board dependency</h3>

<ol>
  <li>Remove <code class="language-plaintext highlighter-rouge">Main.storyboard</code> file</li>
  <li>Remove storyboard reference from <code class="language-plaintext highlighter-rouge">Info.plist</code> → In Scene Configuration find <code class="language-plaintext highlighter-rouge">Storyboard Name</code> and delete it</li>
  <li>Go to build settings and remove <code class="language-plaintext highlighter-rouge">UIKit MainStoryboard File Base Name</code> field</li>
  <li>Create a window in Scene Delegate</li>
</ol>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">scene</span><span class="p">(</span><span class="n">_</span> <span class="nv">scene</span><span class="p">:</span> <span class="kt">UIScene</span><span class="p">,</span>
           <span class="n">willConnectTo</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">UISceneSession</span><span class="p">,</span>
           <span class="n">options</span> <span class="nv">connectionOptions</span><span class="p">:</span> <span class="kt">UIScene</span><span class="o">.</span><span class="kt">ConnectionOptions</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">scene</span> <span class="o">=</span> <span class="p">(</span><span class="n">scene</span> <span class="k">as?</span> <span class="kt">UIWindowScene</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">window</span> <span class="o">=</span> <span class="kt">UIWindow</span><span class="p">(</span><span class="nv">windowScene</span><span class="p">:</span> <span class="n">scene</span><span class="p">)</span>
    <span class="n">window</span><span class="o">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="kt">ViewController</span><span class="p">()</span>
    <span class="n">window</span><span class="o">.</span><span class="nf">makeKeyAndVisible</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">window</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="dependency-injection">Dependency injection</h2>

<!-- https://www.swiftbysundell.com/tips/testing-code-that-uses-static-apis/ -->

<p><a href="https://www.avanderlee.com/swift/dependency-injection/">Explanation of the code under this link</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">InjectionKey</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">Value</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">currentValue</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="kt">Value</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">InjectedValues</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="k">var</span> <span class="nv">current</span> <span class="o">=</span> <span class="kt">InjectedValues</span><span class="p">()</span>
    
    <span class="kd">static</span> <span class="kd">subscript</span><span class="o">&lt;</span><span class="kt">K</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">key</span><span class="p">:</span> <span class="kt">K</span><span class="o">.</span><span class="k">Type</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">K</span><span class="o">.</span><span class="kt">Value</span> <span class="k">where</span> <span class="kt">K</span> <span class="p">:</span> <span class="kt">InjectionKey</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">key</span><span class="o">.</span><span class="n">currentValue</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="n">key</span><span class="o">.</span><span class="n">currentValue</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">subscript</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">WritableKeyPath</span><span class="o">&lt;</span><span class="kt">InjectedValues</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">current</span><span class="p">[</span><span class="nv">keyPath</span><span class="p">:</span> <span class="n">keyPath</span><span class="p">]</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="n">current</span><span class="p">[</span><span class="nv">keyPath</span><span class="p">:</span> <span class="n">keyPath</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@propertyWrapper</span>
<span class="kd">struct</span> <span class="kt">Injected</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">WritableKeyPath</span><span class="o">&lt;</span><span class="kt">InjectedValues</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span>
    <span class="k">var</span> <span class="nv">wrappedValue</span><span class="p">:</span> <span class="kt">T</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="kt">InjectedValues</span><span class="p">[</span><span class="n">keyPath</span><span class="p">]</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="kt">InjectedValues</span><span class="p">[</span><span class="n">keyPath</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">WritableKeyPath</span><span class="o">&lt;</span><span class="kt">InjectedValues</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="n">keyPath</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="define-dependency">Define dependency</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">struct</span> <span class="kt">UsersRepositoryKey</span><span class="p">:</span> <span class="kt">InjectionKey</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">currentValue</span><span class="p">:</span> <span class="kt">AnyUsersRepository</span> <span class="o">=</span> <span class="kt">UsersRepository</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">InjectedValues</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">usersRepository</span><span class="p">:</span> <span class="kt">AnyUsersRepository</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">Self</span><span class="p">[</span><span class="kt">UsersRepositoryKey</span><span class="o">.</span><span class="k">self</span><span class="p">]</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="k">Self</span><span class="p">[</span><span class="kt">UsersRepositoryKey</span><span class="o">.</span><span class="k">self</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">AnyUsersRepository</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">(</span><span class="n">_</span> <span class="nv">result</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">User</span><span class="p">],</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">Void</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">UsersRepository</span><span class="p">:</span> <span class="kt">AnyUsersRepository</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">(</span><span class="n">_</span> <span class="nv">result</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">User</span><span class="p">],</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="o">&lt;</span><span class="err">#</span><span class="kt">Implementation</span><span class="err">#</span><span class="o">&gt;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@Injected</span><span class="p">(\</span><span class="o">.</span><span class="n">usersRepository</span><span class="p">)</span> <span class="k">var</span> <span class="nv">usersRepository</span><span class="p">:</span> <span class="kt">AnyUsersRepository</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">InjectedValues</span><span class="p">[\</span><span class="o">.</span><span class="n">usersRepository</span><span class="p">]</span> <span class="o">=</span> <span class="kt">MockedUsersRepository</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="model-view-controller">Model-View-Controller</h2>

<h4 id="clasic-version">Clasic version</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">View</code> and <code class="language-plaintext highlighter-rouge">Model</code> are linked together, so reusability is reduced.</li>
  <li>Note: Views in iOS apps are quite often reusable.</li>
</ul>

<p>
 <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="473px" height="186px" viewBox="-0.5 -0.5 473 186" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2023-11-07T18:34:22.657Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/22.0.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36&quot; version=&quot;22.0.3&quot; etag=&quot;Iz-bp9UTBWzNTIIgo6GH&quot; type=&quot;device&quot;&gt;&lt;diagram name=&quot;Page-1&quot; id=&quot;xkBbz92YaXBT8ljpGPb4&quot;&gt;7VlbV6MwEP41fdQDoRf62Iu6D+6u53j29phCSrOmDCektvXXbwJJIQUrWmvr6hPky2RIMt98DKHljearK46T2VcICWshJ1y1vHELIdfv9uVFIWuNSChHIk5DjRXALX0gGnQ0uqAhSS1DAcAETWwwgDgmgbAwzDksbbMpMPupCY5IBbgNMKuiv2goZjnqo16BfyE0mpknu2bFc2yM9UrSGQ5hWYK8i5Y34gAiv5uvRoSp3TP7ko+7fKR3MzFOYtFkAMoH3GO20GvT8xJrs1gSyrXrJnAxgwhizC4KdMhhEYdEeXRkq7C5Bkgk6ErwLxFirQOJFwIkJGfI17/VoHPUMe0/2knWGK+s1lq3phCLETDg2fw8x+k6WD58mAoOd+TxHhMqpH2YRan5YUajWN4H8lFEDh8yPCHsBlIqKFgd94QLKqlwvWUwp2GY7YYxGGiXm47M5RAHd1G2YWaiMcSqN993tdlWKFNY8EBDOkkE5hHZUKsacXfDI5mBBOZEbp404YRhQe9t91hnQrSx00MHnON1ySABGou05PlGAdJAZzXyNaN1Tvct3smb3KFplWZWQBk363nqVXj6IwmxILVszUJTF9Tt0ExACJgrBpOUPuBJ5kRRTK9WeuwMW51xPekGCp8Bpw+yDzPNpJcTpwk/lBOyatWInJ59IS1lSqB6SmhHzrnj+8gK35l2/jzSFKwwJjCdppKrNhWeG/z2SYjUvho1GNfoTlWZalUsG3sQ/Wi/vn5Ykd4R1s4jOZ1+JnWjpG7vTOoz+Vrt+p0TSuNuJd4jucccGJNbuR1yO12nlLGtrVOxu8RzylTKfU9ILMff4jg9UIHwwjg2yCs9oI3sF6h5ny6LAtM1JrNScdl19s/E3hEFdkVFrq+9jm5u9FXeF/KqGkZdC1W2NFm7eG+ybGq4si53jyfLflWWU5WgziBQ4vZfqXOa4IDG0VBPatw+rGL3nijDUK/Xtsswbz/9XtcOeBU17x9fM9yyYBT68VE145i1nDmZKdHhiqjvRWeR1XRhxozPD7amStF/Qilc37wiTqK0M3Qshf8nJcunqrodJVx9wffuqjrUsas65LxhWece83TP1HWWRqOGGu3aGo1eV6PrLKtc2V+j2zUafYDzusZ0qB6ifQNBp/Tzi7uhKru7z9HkJ7fb8+0C7pTO0dzqQZr+OfPRZbrrvJ1My2bxfyePYvGbzLv4Bw==&lt;/diagram&gt;&lt;/mxfile&gt;" class="center-image">
  <g>
    <path d="M 171 14 L 31.05 14 L 31 115.76" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 31 121.76 L 27 113.76 L 31 115.76 L 35 113.77 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="35.24" y="8.55">Update</text>
    </g>
    <path d="M 291 34 L 410.95 34 L 411 115.76" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 411 121.76 L 406.99 113.77 L 411 115.76 L 414.99 113.76 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="367.87" y="29.55">Updates</text>
    </g>
    <rect x="171" y="4" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="230.5" y="38.5">Controller</text>
    </g>
    <path d="M 91 124 L 90.95 49.05 L 162.76 49.01" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 168.76 49 L 160.77 53.01 L 162.76 49.01 L 160.76 45.01 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="114.98" y="44.59">User Actions</text>
    </g>
    <path d="M 121 169 L 342.76 169" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 348.76 169 L 340.76 173 L 342.76 169 L 340.76 165 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="256.82" y="164.55">Gets updated state</text>
    </g>
    <rect x="1" y="124" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="60.5" y="158.5">View</text>
    </g>
    <path d="M 351 139 L 129.24 139" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 123.24 139 L 131.24 135 L 129.24 139 L 131.24 143 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="256.29" y="133.55">Notifies</text>
    </g>
    <rect x="351" y="124" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="410.5" y="158.5">Model</text>
    </g>
  </g>
</svg>
</p>

<h4 id="apple-version">Apple version</h4>

<p>
 <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="473px" height="187px" viewBox="-0.5 -0.5 473 187" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2023-11-07T18:35:04.577Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/22.0.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36&quot; version=&quot;22.0.3&quot; etag=&quot;K1wkrmuddXaPyJl6GV6f&quot; type=&quot;device&quot;&gt;&lt;diagram name=&quot;Page-1&quot; id=&quot;i07ux6VTKLeM-OTNBLxs&quot;&gt;5ZhNU9swEIZ/TY5k/BHHzjEf0B5oywzTFo7CVhwVxeuRFZLw6yvZq9iOTYCEQEpPWK9Wa0n76kFxxx3PV18ESWffIKK841jRquNOOo5jB/2B+qOVNSpKKpRYsAi1UrhmjxRFC9UFi2hWC5QAXLK0LoaQJDSUNY0IAct62BR4/a0piWlDuA4Jb6q/WSRnhRo4fql/pSyemTfbZsVzYoJxJdmMRLCsSO55xx0LAFk8zVdjyvXumX0pxl080buZmKCJfMkApxjwQPgC14bzkmuzWBqptWMThJxBDAnh56U6ErBIIqozWqpVxlwCpEq0lfiHSrnGQpKFBCWpGYr1jR7UdTzTvsUkeWOyqrXW2JpCIsfAQeTzcy2rbxH18lEmBdzTp3tMqRzMYRal50c4ixP1HKpXUTV8xMkd5VeQMcmg1vFAhWTKCpdbAXMWRflumIAhptx05ClHJLyP8w0zE00g0b3FvuvNrpUyg4UIUcJDIomIKVZ30Cy4vbGROoAU5lTtnQoRlBPJHurZCR6EeBOHQ4dCkHUlIAWWyKyS+UoLKgAPtRP4Xa/IiYfaDZyq89RDkdO0KpMrpdyd7U51G079mUZE0la/5sVpK+t2ce5ASphrD9OMPZK7PIk2GS5YZfRGHW/Sbruh1mcg2KPqIxy9tL91spSELIlHOKky2zOu0YnpqtOCPlxRCZyqU5x2p2Aiq2sFWENT0zNM/jovlWYxITCdZsrBdXu81hC9k0DXoeQaTlpo1ORVK9vysXTF5A2O08+3FaKqZjkT3TATOQaKbOftWVSzxw4veE/AIfvMdHCPS4feTjqcKY/1A++EeNBveGCs9l0A52p7t21QP/dTxvnW1ul6XpA54/rI/EhposZfkyQ70v1jzzq+4KzhgJ7T+Aft44FdlldY2xhhVrm+9q3DD6j/gbBGQFpd36sycicgS8LX+I4p3hnxB9N60KR1/+NgHTRhnekjag1DjbxPzez+cZntP3Ojc3y/V7/RuYcRfN064E14PmjY5Bejy+dIvgPb7ZD/50jueNsk7w3ekeTmG8zHotzZA+X2UVHeFtl0y8EoN7fsE2G5bTfc8B0km7LPffW27VK8pFO96WfOS39Y7cl222qvaXkht/2gDvdT+rlujFtxCn4Z/t+B3rfeE+iqWX5eLupYfqV3z/8C&lt;/diagram&gt;&lt;/mxfile&gt;" class="center-image">
  <g>
    <path d="M 170.5 15 L 30.53 15 L 30.5 116.76" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 30.5 122.76 L 26.5 114.76 L 30.5 116.76 L 34.5 114.76 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="34.74" y="8.55">Update</text>
    </g>
    <path d="M 290.5 20 L 410.53 20.05 L 410.5 116.76" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 410.5 122.76 L 406.5 114.76 L 410.5 116.76 L 414.5 114.77 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="372.63" y="12.59">Updates</text>
    </g>
    <rect x="170.5" y="5" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="230" y="39.5">Controller</text>
    </g>
    <path d="M 90.5 125 L 90.53 50.05 L 162.26 50.01" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 168.26 50 L 160.27 54.01 L 162.26 50.01 L 160.26 46.01 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="114.55" y="43.59">User Actions</text>
    </g>
    <rect x="0.5" y="125" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="60" y="159.5">View</text>
    </g>
    <path d="M 380.5 125 L 380.53 50.05 L 298.74 50" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 292.74 50 L 300.74 46.01 L 298.74 50 L 300.73 54.01 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="10.999999999999998px">
      <text x="371.55" y="42.18">Notifies</text>
    </g>
    <rect x="350.5" y="125" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="11.999999999999998px">
      <text x="410" y="159.5">Model</text>
    </g>
  </g>
</svg>
</p>

<p><strong>Model</strong> responsibilities:</p>

<ul>
  <li>Business logic</li>
  <li>Accessing and manipulating data</li>
  <li>Persistence</li>
  <li>Communication/Networking</li>
  <li>Parsing</li>
  <li>Extensions and helper classes</li>
  <li>Communication with models</li>
</ul>

<p>Note: The <code class="language-plaintext highlighter-rouge">Model</code> must not communicate directly with the <code class="language-plaintext highlighter-rouge">View</code>. The <code class="language-plaintext highlighter-rouge">Controller</code> is the link between those</p>

<p><strong>View</strong> responsibilities:</p>

<ul>
  <li>Animations, drawings (<code class="language-plaintext highlighter-rouge">UIView</code>,  <code class="language-plaintext highlighter-rouge">CoreAnimation</code>, <code class="language-plaintext highlighter-rouge">CoreGraphics</code>)</li>
  <li>Show data that controller sends</li>
  <li>Might receive user input</li>
</ul>

<p><strong>Controller</strong> responsibilities:</p>

<ul>
  <li>Exchange data between <code class="language-plaintext highlighter-rouge">View</code> and <code class="language-plaintext highlighter-rouge">Model</code></li>
  <li>Receive user actions and interruptions or signals from the outside the app</li>
  <li>Handles the view life cycle</li>
</ul>

<h4 id="advantages">Advantages</h4>

<ul>
  <li>Simple and usually less code</li>
  <li>Fast development for simple apps</li>
</ul>

<h4 id="disadvantages">Disadvantages</h4>

<ul>
  <li>Controllers coupled views</li>
  <li>Massive <code class="language-plaintext highlighter-rouge">ViewController</code>s</li>
</ul>

<h4 id="communication-between-components">Communication between components</h4>

<ul>
  <li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html">Delegation</a> pattern</li>
  <li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html">Target-Action</a> pattern</li>
  <li><a href="https://developer.apple.com/documentation/foundation/nsnotificationcenter">Observer</a> pattern with <code class="language-plaintext highlighter-rouge">NSNotificationCenter</code></li>
  <li><a href="https://developer.apple.com/documentation/swift/using-key-value-observing-in-swift">Observer</a> pattern with <code class="language-plaintext highlighter-rouge">KVO</code></li>
</ul>

<h2 id="model-view-presenter">Model-View-Presenter</h2>

<p>In this design pattern View is implemented with classes <code class="language-plaintext highlighter-rouge">UIView</code> and <code class="language-plaintext highlighter-rouge">UIViewController</code>. The <code class="language-plaintext highlighter-rouge">UIViewController</code> has less responsibilities which are limited to:</p>

<ul>
  <li>Routing/Coordination</li>
  <li>Navigation</li>
  <li>Passing informations via a delegation pattern</li>
</ul>

<h4 id="view">View</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ExampleController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
	<span class="kd">private</span> <span class="k">let</span> <span class="nv">exampleView</span> <span class="o">=</span> <span class="kt">ExampleView</span><span class="p">()</span>
	<span class="k">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">super</span><span class="o">.</span><span class="nf">loadView</span><span class="p">()</span>
		<span class="nf">setup</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="kd">private</span> <span class="kd">func</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">let</span> <span class="nv">presenter</span> <span class="o">=</span> <span class="kt">ExamplePresenter</span><span class="p">(</span><span class="n">exampleView</span><span class="p">)</span>
		<span class="n">exampleView</span><span class="o">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
		<span class="n">exampleView</span><span class="o">.</span><span class="nf">setupView</span><span class="p">()</span>
		<span class="k">self</span><span class="o">.</span><span class="n">view</span> <span class="o">=</span> <span class="n">exampleView</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="presenter">Presenter</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleViewDelegate</span> <span class="p">{</span>
	<span class="kd">func</span> <span class="nf">updateView</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">ExamplePresenter</span> <span class="p">{</span>
	<span class="kd">private</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">exampleView</span><span class="p">:</span> <span class="kt">ExampleViewDelegate</span><span class="p">?</span>
	<span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">exampleView</span><span class="p">:</span> <span class="kt">ExampleViewDelegate</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">self</span><span class="o">.</span><span class="n">exampleView</span> <span class="o">=</span> <span class="n">exampleView</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="advantages-1">Advantages</h4>

<ul>
  <li>Easier to test business logic</li>
  <li>Better separation of responsibilities</li>
</ul>

<h4 id="disadvantages-1">Disadvantages</h4>

<ul>
  <li>Usually not a better choice for smaller projects</li>
  <li>Presenters might become massive</li>
  <li>Controllers still handle navigation. Possible solutions →  extend the pattern with Router or Coordinator.</li>
</ul>

<h4 id="common-layers">Common layers</h4>

<ul>
  <li>Data access layer: <code class="language-plaintext highlighter-rouge">CRUD</code> operations facilitated with <code class="language-plaintext highlighter-rouge">CoreData</code> <code class="language-plaintext highlighter-rouge">Realm</code> etc.</li>
  <li>Services: Classes that interacts with database entities, like retrieve data, transform them into objects.</li>
  <li>Extensions/utils</li>
</ul>

<h2 id="model-view-viewmodel">Model-View-ViewModel</h2>

<p><code class="language-plaintext highlighter-rouge">ViewModel</code> has no references to the view.</p>

<p>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="572px" height="63px" viewBox="-0.5 -0.5 572 63" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2023-11-15T22:26:32.916Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/22.0.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36&quot; version=&quot;22.0.3&quot; etag=&quot;69OR-mwMNjNfgNuLt2t0&quot; type=&quot;device&quot;&gt;&lt;diagram name=&quot;Page-1&quot; id=&quot;UDvbTf5mp8RW8-KXhH33&quot;&gt;7Vhbb9owFP41vE65kEAfC7TbpG6rVHXrHg0xiVeTEzmmQH/97OSYxLm0bNC1qiYhYX8+5/jynRsM/Olq+1GQLPkCEeUDz4m2A3828DzXDXz1pZEdIo4blEgsWIRYBdywR2oEEV2ziOaWoATgkmU2uIA0pQtpYUQI2NhiS+D2rhmJaQu4WRDeRn+wSCYlOvZGFf6JsjgxO7vhWbmyIkYYb5InJIJNDfIvBv5UAMhytNpOKdevZ96l1LvsWd0fTNBUHqLglQoPhK/xbnguuTOXpZG6O05ByARiSAm/qNCJgHUaUW3RUbNK5gogU6CrwF9Uyh0SSdYSFLSEVE6Bgyi28R0ndIiyMcmlgHvav2Je3EMb5mx6G8JZnKrxQl2fKvUJJ3PKryFnkoG18ECFZIrRq4bAikVRcSkjcI4m9wvKgtjd4YbF5Ke++YfATGdbfIlytjOzLZN3tXFNS80qJT0xOiUZmgGL3xzWYoFQiP5PREyR8lHbC9y9b6mopLCi6mRKRFBOJHuwrROMjngvh6rnQpBdTSADlsq8ZvlaA0oAI9038YpxHp41nPHP5NWgPEGP9tjWHjmOfZ/y1VDriWN4YeMYw4ah8q1bhtSg9rgVVIRcd/j5rfCbEUkUMmdpxNK4MxgLl+1y9qbLzkFKWOkApTl7JPPCiHYrJE5ZDCaDYNYdjOcaT0CwR7VGODr83wdUoTkhi/u4yBdmtxRSuvd0bYRuLW/EHI6nrzJn3bu9U3h35QdGBJbLnB5L8fD1Muw+Uzl2pvKeS1V93tBMt+2E3Jm8C12T/lwr/Xkvkf/cDhc5NgFaHvAE3UGL7tssIpLm/0P5oFAevuFQDlvcfmd0g/1tg107YpeM88YraZouyYpx7evfMpoq/RuS5i/SGfUxckCEoMLQaRRFUyQ3VQPsGkKTWvMbOv1kHRpUo86HH2hCdM+gXU59nNvPGp6qmwvgXLnyM6Q8wUA3X6duV0/Aizt+RV7Gb6C2Nbrw0WlrW5dkm9fu1n50dG0zhaxe3MLT17buNjj0mv10cFA/3f8r4YjUe9bytK8g2ZK9r7qaZ2Shuv4JHqo4CGJXdCkRecHqO37D1dcEQ80HDiq97yHLh/6/y/JqWv3/VPJU/Y3nX/wG&lt;/diagram&gt;&lt;/mxfile&gt;" class="center-image">
  <g>
    <path d="M 220 30 L 130 30 L 128.24 30" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 122.24 30 L 130.24 26 L 128.24 30 L 130.24 34 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="11px">
      <text x="169.95" y="25.41">Data binding</text>
    </g>
    <path d="M 340 15 L 441.76 15" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 447.76 15 L 439.76 19 L 441.76 15 L 439.76 11 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="11px">
      <text x="395.41" y="10.41">Updates</text>
    </g>
    <rect x="220" y="0" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="279.5" y="34.5">ViewModel</text>
    </g>
    <rect x="0" y="0" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="59.5" y="27.5">View</text>
      <text x="59.5" y="41.5">+ UIViewController</text>
    </g>
    <path d="M 450 45 L 348.24 45" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 342.24 45 L 350.24 41 L 348.24 45 L 350.24 49 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="11px">
      <text x="394.5" y="40.41">Notifies</text>
    </g>
    <rect x="450" y="0" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="509.5" y="34.5">Model</text>
    </g>
  </g>
</svg>
</p>

<p>Binding is done using: <code class="language-plaintext highlighter-rouge">Combine Framework</code>, <code class="language-plaintext highlighter-rouge">RxSwift</code>, <code class="language-plaintext highlighter-rouge">Bond</code> or <code class="language-plaintext highlighter-rouge">KVO</code> or using delegation pattern</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Model</code></strong> does same things as in <code class="language-plaintext highlighter-rouge">MVP</code> and <code class="language-plaintext highlighter-rouge">MVC</code>.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">View</code></strong> also is similar, but binds with <code class="language-plaintext highlighter-rouge">ViewModel</code></li>
  <li><strong><code class="language-plaintext highlighter-rouge">ViewModel</code></strong> keeps updated state of the view, and process data for i</li>
</ul>

<h4 id="advantages-2">Advantages</h4>

<ul>
  <li>Better reparation of responsibilities</li>
  <li>Better testability, without needing to take into account the views</li>
</ul>

<h4 id="disadvantages-2">Disadvantages</h4>

<ul>
  <li>Might be slower and introduce dependency on external libraries</li>
  <li>Harder to learn and can become complex</li>
</ul>

<h4 id="extension-with-coordinator-mvvm-c"><strong>Extension with Coordinator MVVM-C</strong></h4>

<p>Role of <code class="language-plaintext highlighter-rouge">Coordinator</code> is to manage navigation flow.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Coordinator</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">navigationController</span><span class="p">:</span> <span class="kt">UINavigationController</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>and an example implementation</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ExampleCoordinator</span><span class="p">:</span> <span class="kt">Coordinator</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">navigationController</span><span class="p">:</span> <span class="kt">UINavigationController</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">navigationController</span><span class="p">:</span> <span class="kt">UINavigationController</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationController</span> <span class="o">=</span> <span class="kt">UINavigationController</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">ExampleViewModel</span><span class="p">(</span><span class="nv">someService</span><span class="p">:</span> <span class="kt">SomeService</span><span class="p">(),</span>
                                         <span class="nv">coordinator</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
        <span class="n">navigationController</span><span class="o">.</span><span class="nf">pushViewController</span><span class="p">(</span><span class="kt">ExampleController</span><span class="p">(</span><span class="n">viewModel</span><span class="p">),</span>
                                                <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">showList</span><span class="p">(</span><span class="n">_</span> <span class="nv">list</span><span class="p">:</span> <span class="kt">ExampleListModel</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">listCoordinator</span> <span class="o">=</span> <span class="kt">ListCoordinator</span><span class="p">(</span><span class="nv">navigationController</span><span class="p">:</span> <span class="n">navigationController</span>
                                              <span class="nv">list</span><span class="p">:</span> <span class="n">list</span><span class="p">)</span>
        <span class="n">listCoordinator</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the book I am reading the author created an <code class="language-plaintext highlighter-rouge">ExampleCoordinatorProtocol</code> with a <code class="language-plaintext highlighter-rouge">func showList(_ list: ExampleListModel)</code> where the <code class="language-plaintext highlighter-rouge">ExampleCoordinator</code> implemented it. I think it does not make any sense, however if we might want to inject the coordinator then we might want to relay on an abstraction.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">scene</span><span class="p">(</span><span class="n">_</span> <span class="nv">scene</span><span class="p">:</span> <span class="kt">UIScene</span><span class="p">,</span>
           <span class="n">willConnectTo</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">UISceneSession</span><span class="p">,</span>
           <span class="n">options</span> <span class="nv">connectionOptions</span><span class="p">:</span> <span class="kt">UIScene</span><span class="o">.</span><span class="kt">ConnectionOptions</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">scene</span> <span class="o">=</span> <span class="p">(</span><span class="n">scene</span> <span class="k">as?</span> <span class="kt">UIWindowScene</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">window</span> <span class="o">=</span> <span class="kt">UIWindow</span><span class="p">(</span><span class="nv">windowScene</span><span class="p">:</span> <span class="n">scene</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">navigationController</span> <span class="o">=</span> <span class="kt">UINavigationController</span><span class="p">()</span>
    <span class="n">exampleCoordinator</span> <span class="o">=</span> <span class="kt">ExampleCoordinator</span><span class="p">(</span><span class="nv">navigationController</span><span class="p">:</span> <span class="n">navigationController</span><span class="p">)</span>
    <span class="n">exampleCoordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">window</span><span class="o">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">navigationController</span>
    <span class="n">window</span><span class="o">.</span><span class="nf">makeKeyAndVisible</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">window</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="viper">VIPER</h2>

<p>
 <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="602px" height="221px" viewBox="-0.5 -0.5 602 221" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2023-11-15T22:24:54.105Z&quot; agent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/22.0.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36&quot; version=&quot;22.0.3&quot; etag=&quot;y-M79igm0DH8BH6Jtz25&quot; type=&quot;device&quot;&gt;&lt;diagram name=&quot;Page-1&quot; id=&quot;7r8acp36S0mCuLvdL9dW&quot;&gt;7Vptb+I4EP41+bjITkiAjwW6tyvt6qqr7m770QUD3oYYOeZtf/3ZxM6LnUAoIfTalSoVj+2J/czM48k4jjda7v5gaLX4Tqc4dFww3Tne2HFdCH1P/JOSvZIA6CeSOSNTJcsEj+QX1gOVdE2mOC4M5JSGnKyKwgmNIjzhBRlijG6Lw2Y0LD51hebYEjxOUGhL/yVTvkikfbeXyb9gMl/oJ8NgkPQskR6sdhIv0JRucyLv3vFGjFKe/FruRjiU6GlcknmfK3rThTEc8ToT3GTCBoVrtbe/6JpjplbH93rLjK6jKZazgOMNZyQMRzSkTLQjGmEpohH/jJYklEb9c4UjMf8RRbHq0qMd1wMgAEhoGsac0Rdc3aOxdZWOR7UctcsNZhzvKjcOUziFI2K6xJztxRA1oQuUBbQPuj0l2GYWhdpMi5w1PSVDyonmqe4MZ/FDQV0Ou2fB/g/BW8cNBAhQAuy44g/8/VWKR2LrjIbhaascMUG5wZq1ilx284YBg5qG8RswTNeCGE9F6KsmZXxB5zRC4X0mHRaNkI35RulK4fITc75XPIbWnArRgi9D1VtiibtxKd6ltjmMFeiy/Q+1hkPjSTY6vm6Od/nO8V61kv3KTRbpFLE55gWOqGFChkPEyaaoqswcauoDJUJjanrYN2PSjLWYrtkEq2l5WjM0edDQ5HUNTckGLU13jKF9bthKDojPWXLfN/wtUZl5X4pXLYf0LaZ4YDgWhpBsAOhWRLfAXXE2IFI+QxNc6sbf0LM4ib0hCsk8EuJJosYbyoAl4ni7Ux3PlHO6lK6NY/ILPR+USG9RcAiN/tDxxybnfMHhBktNR5z6QBlJJAwOwcOFy9BIPSCUSxyiycv8EFUGZVXSizro1Uqz4zXvs92jtAM6bj+Zc6ETf4LGFDqbxZg7Jgmd5wbB/5aXdoQfaKnT81XzSROR+J2xkmycIKUk+lWy1RYppb6kIxyaVFKXlKyTDZr01hApud2KBzVFSr2jpLRAkpO2GL3IMYe85jcZGb4anCAjGFxGRo2ST/+Yud9/Rgp9M5zqvioEDWSkg1swf8raecrOGLyctdMUFBZT0N6pHLSJc6bGkQFLctsrHCN1DatT1FxYfZUhhSacWjS6qgy4t8qlVyTPQbMHfaNcqZ2swqrvny27vTpsCa7EltAuaD1itiElb0TvEPvAM7GHNvaDK9W0oF3U+kjQByb0fovQdy3o7yNO+P5DIp+eGW0gb9dnPhDyJt2kFN4G8oGFvJ0bRdM7ed0jU6IQxTGZHKBBjNviXPZbNFV5LlwzFT6zGttWJqygymfC2pNrmD9nXb/Eulp2YeGla5RW+9Dwmrp1F99w056ZaDRUdgms+o4Pji7MmuCCcycUn3BxYQfalZ3fQVU3qLySoOq+saAK7NKg/7qosjTpm4+rh5URJZc7vV3fquf01d5dUQm5oacWvLL+Sd+SV1aZ+HyvNKv1rnlqVHjla/zmpqW5T6ADQOFKpeMC9yiBNnWf84AZETjJCpNBzB3XL3j8CX+vwaolpNra1Y91uQuDV5KlpQlcKQexl9wwWer4sj5d0XfR1VcDb7VS2d6tD6yoXOqr48svoRutZabxeBOCg0Vuq5kbSlqEg+KxK3KVE0R0aJm01lLe2L/ogG78WkInP8e/ODlS036rYX7FuG76/Gk2ir1bRnH2UveU63n1Zx8lhQu3tVgRzezL3MQS2QfO3v1/&lt;/diagram&gt;&lt;/mxfile&gt;" class="center-image">
  <g>
    <rect x="250" y="182" width="120" height="30" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="309.5" y="201.5">Router</text>
    </g>
    <rect x="250" y="2" width="120" height="50" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="309.5" y="24.5">View</text>
      <text x="309.5" y="38.5">+ UIViewController</text>
    </g>
    <path d="M 30 142 L 30 197 L 241.76 197" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 247.76 197 L 239.76 201 L 241.76 197 L 239.76 193 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="9px">
      <text x="140.32" y="192.41">Presenter owns router interface</text>
    </g>
    <path d="M 90 82 L 90 42 L 241.76 42" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 247.76 42 L 239.76 46 L 241.76 42 L 239.76 38 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="9px">
      <text x="166.32" y="37.41">Presenter has weak view</text>
    </g>
    <rect x="0" y="82" width="120" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="59.5" y="116.5">Presenter</text>
    </g>
    <path d="M 320 127 L 128.24 127" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 122.24 127 L 130.24 123 L 128.24 127 L 130.24 131 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="9px">
      <text x="219.95" y="122.41">Interactor has weak presenter</text>
    </g>
    <rect x="320" y="82" width="100" height="60" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="369.5" y="116.5">Interactor</text>
    </g>
    <rect x="480" y="22" width="90" height="30" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="524.5" y="41.5">Service</text>
    </g>
    <rect x="510" y="62" width="90" height="30" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="554.5" y="81.5">Service</text>
    </g>
    <rect x="510" y="132" width="90" height="30" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="554.5" y="151.5">Entity</text>
    </g>
    <rect x="480" y="172" width="90" height="30" fill="none" stroke="#0060ad" stroke-width="2" pointer-events="all" />
    <g fill="#0060ad" font-family="Open Sans" font-weight="bold" text-anchor="middle" font-size="12px">
      <text x="524.5" y="191.5">Entity</text>
    </g>
    <path d="M 473.67 42.27 L 450 62 L 450 112 L 450 162 L 473.67 181.73" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 478.28 38.43 L 474.7 46.63 L 473.67 42.27 L 469.58 40.48 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <path d="M 478.28 185.57 L 469.58 183.52 L 473.67 181.73 L 474.7 177.37 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <path d="M 502.89 81.15 L 450 112 L 502.89 142.85" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 508.07 78.13 L 503.17 85.61 L 502.89 81.15 L 499.14 78.7 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <path d="M 508.07 145.87 L 499.14 145.3 L 502.89 142.85 L 503.17 138.39 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <path d="M 450 112 L 428.24 112" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 422.24 112 L 430.24 108 L 428.24 112 L 430.24 116 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <path d="M 249.4 12.1 L 30 12.09 L 30 73.76" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 30 79.76 L 26 71.76 L 30 73.76 L 34 71.76 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="9px">
      <text x="144.81" y="7.5">View owns Presenter</text>
    </g>
    <path d="M 120 97 L 220 97 L 309.86 97.77" fill="none" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke" />
    <path d="M 315.86 97.82 L 307.83 101.75 L 309.86 97.77 L 307.9 93.75 Z" fill="#0060ad" stroke="#0060ad" stroke-width="2" stroke-miterlimit="10" pointer-events="all" />
    <g fill="#0060AD" font-family="Helvetica" text-anchor="middle" font-size="9px">
      <text x="219.05" y="92.41">Presenter owns Interactor</text>
    </g>
  </g>
</svg>
</p>

<h4 id="view-1">View</h4>

<p>It includes <code class="language-plaintext highlighter-rouge">UIViewController</code></p>

<ul>
  <li>Made only to preserve elements like Buttons Labels</li>
  <li>It sends informations to presenters, and receive messages what to show and knows how</li>
</ul>

<h4 id="interactor">Interactor</h4>

<ul>
  <li>Receives informations form databases, servers etc.</li>
  <li>The book says that the Interactor receive actions from presenter, and returns the result via Delegation Pattern.</li>
  <li>The interactor never sends entities to the Presenter</li>
</ul>

<h4 id="presenter-1">Presenter</h4>

<ul>
  <li>Is in the centre and serves as a link</li>
  <li>Process events from the view and requests data from the Interctor. It receives that as primitives, never Entities.</li>
  <li>it handles navigation to the other screens using the Router</li>
</ul>

<h4 id="entity">Entity</h4>

<ul>
  <li>Simple models usually data structures</li>
  <li>They can only be used by the Interactor</li>
</ul>

<h4 id="router">Router</h4>

<ul>
  <li>Creates screens</li>
  <li>Handles navigation, but itself does not know where to go to.</li>
  <li><em>The book says it is the owner of the <code class="language-plaintext highlighter-rouge">UINavigationController</code> and UIViewController, but it is contrary to other parts of the book, so I do not know</em></li>
  <li>Similar to <code class="language-plaintext highlighter-rouge">Coordinator</code> form MVVM-C</li>
</ul>

<!--
https://github.com/ochococo/Design-Patterns-In-Swift

https://nalexn.github.io/clean-architecture-swiftui/
https://medium.com/@vladislavshkodich/architectures-comparing-for-swiftui-6351f1fb3605

-->

<p><strong><code class="language-plaintext highlighter-rouge">Entity.swift</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">User</span><span class="p">:</span> <span class="kt">Codable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Interactor.swift</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">FetchError</span><span class="p">:</span> <span class="kt">Error</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">failed</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">AnyInteractor</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">presenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">UserInteractor</span><span class="p">:</span> <span class="kt">AnyInteractor</span> <span class="p">{</span>
    <span class="kd">@Injected</span><span class="p">(\</span><span class="o">.</span><span class="n">usersRepository</span><span class="p">)</span> <span class="k">var</span> <span class="nv">usersRepository</span><span class="p">:</span> <span class="kt">AnyUsersRepository</span>
    
    <span class="k">var</span> <span class="nv">presenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span><span class="p">?</span>
    
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">usersRepository</span><span class="o">.</span><span class="n">getUsers</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">presenter</span><span class="p">?</span><span class="o">.</span><span class="nf">interactorDidFetchUsers</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Presenter.swift</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">AnyPresenter</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">router</span><span class="p">:</span> <span class="kt">AnyRouter</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">interactor</span><span class="p">:</span> <span class="kt">AnyInteractor</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">view</span><span class="p">:</span> <span class="kt">AnyView</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">interactorDidFetchUsers</span><span class="p">(</span><span class="n">with</span> <span class="nv">result</span><span class="p">:</span> <span class="kt">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">User</span><span class="p">],</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">UserPresenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">interactorDidFetchUsers</span><span class="p">(</span><span class="n">with</span> <span class="nv">result</span><span class="p">:</span> <span class="kt">Result</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">User</span><span class="p">],</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
        <span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">users</span><span class="p">):</span>
            <span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="nf">update</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">users</span><span class="p">)</span>
        <span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
            <span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="nf">update</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">router</span><span class="p">:</span> <span class="kt">AnyRouter</span><span class="p">?</span>
    
    <span class="k">var</span> <span class="nv">interactor</span><span class="p">:</span> <span class="kt">AnyInteractor</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="n">interactor</span><span class="p">?</span><span class="o">.</span><span class="nf">getUsers</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">view</span><span class="p">:</span> <span class="kt">AnyView</span><span class="p">?</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Router.swift</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">EntryPoint</span> <span class="o">=</span> <span class="kt">AnyView</span> <span class="o">&amp;</span> <span class="kt">UIViewController</span>

<span class="kd">protocol</span> <span class="kt">AnyRouter</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">entry</span><span class="p">:</span> <span class="kt">EntryPoint</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">AnyRouter</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">UserRouter</span><span class="p">:</span> <span class="kt">AnyRouter</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">entry</span><span class="p">:</span> <span class="kt">EntryPoint</span><span class="p">?</span>
    
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">AnyRouter</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">router</span> <span class="o">=</span> <span class="kt">UserRouter</span><span class="p">()</span>
        
        <span class="k">var</span> <span class="nv">view</span><span class="p">:</span> <span class="kt">AnyView</span> <span class="o">=</span> <span class="kt">UserViewController</span><span class="p">()</span>
        <span class="k">var</span> <span class="nv">presenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span> <span class="o">=</span> <span class="kt">UserPresenter</span><span class="p">()</span>
        <span class="k">var</span> <span class="nv">interactor</span><span class="p">:</span> <span class="kt">AnyInteractor</span> <span class="o">=</span> <span class="kt">UserInteractor</span><span class="p">()</span>
        
        <span class="n">view</span><span class="o">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
        
        <span class="n">interactor</span><span class="o">.</span><span class="n">presenter</span> <span class="o">=</span> <span class="n">presenter</span>
        
        <span class="n">presenter</span><span class="o">.</span><span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
        <span class="n">presenter</span><span class="o">.</span><span class="n">view</span> <span class="o">=</span> <span class="n">view</span>
        <span class="n">presenter</span><span class="o">.</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">interactor</span>
        
        <span class="n">router</span><span class="o">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">view</span> <span class="k">as?</span> <span class="kt">EntryPoint</span>
        
        <span class="k">return</span> <span class="n">router</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="c1">//There are a few retain cycles with view, presenter, router and interactor. One option you can do is to make those protocols conforms to AnyObject, and mark these references as "weak":</span>
<span class="c1">//1. router's ref to presenter</span>
<span class="c1">//2. router's ref to view</span>
<span class="c1">//3. presenter's ref to view</span>
<span class="c1">//4. interactor's ref to presenter</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">View.swift</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">AnyView</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">presenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="n">with</span> <span class="nv">users</span><span class="p">:</span> <span class="p">[</span><span class="kt">User</span><span class="p">])</span>
    <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="n">with</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">UserViewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">,</span> <span class="kt">AnyView</span> <span class="p">{</span>
    
    
    <span class="k">var</span> <span class="nv">presenter</span><span class="p">:</span> <span class="kt">AnyPresenter</span><span class="p">?</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tableView</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">UITableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"cell"</span><span class="p">)</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">tableView</span>
    <span class="p">}()</span>
    
    <span class="k">var</span> <span class="nv">users</span> <span class="o">=</span> <span class="p">[</span><span class="kt">User</span><span class="p">]()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">tableView</span><span class="p">)</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLayoutSubviews</span><span class="p">()</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">bounds</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="n">with</span> <span class="nv">users</span><span class="p">:</span> <span class="p">[</span><span class="kt">User</span><span class="p">])</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">users</span> <span class="o">=</span> <span class="n">users</span>
            <span class="k">self</span><span class="o">.</span><span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="k">self</span><span class="o">.</span><span class="n">tableView</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="n">with</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">extension</span> <span class="kt">UserViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="n">users</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"cell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">textLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">users</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<!--
RIBs
https://github.com/uber/RIBs
https://medium.com/swlh/ios-architecture-exploring-ribs-3db765284fd8
https://github.com/uber/RIBs/wiki
-->

<!--
redux
https://medium.com/mackmobile/getting-started-with-redux-in-swift-54e00f323e2b
-->

<!-- 

# Factory

```swift
protocol ImageReader {
    func getDecodeImage() -> DecodedImage
}

class DecodedImage {
    private var image: String

    init(image: String) {
        self.image = image
    }

    var description: String {
        "\(image): is decoded"
    }
}

class GifReader: ImageReader {
    private var decodedImage: DecodedImage

    init(image: String) {
        self.decodedImage = DecodedImage(image: image)
    }

    func getDecodeImage() -> DecodedImage {
        decodedImage
    }
}

class JpegReader: ImageReader {
    private var decodedImage: DecodedImage

    init(image: String) {
        decodedImage = DecodedImage(image: image)
    }

    func getDecodeImage() -> DecodedImage {
        decodedImage
    }
}

func runFactoryExample() {
    let reader: ImageReader
    let format = "gif"
    let image = "example image"

    switch format {
    case "gif":
        reader = GifReader(image: image)
    default:
        reader = JpegReader(image: image)
    }
    
    let decodedImage = reader.getDecodeImage()
    print(decodedImage.description)
}
```


```swift

protocol Observer<ValueType> {
    associatedtype ValueType
    func update(value: ValueType)
}

struct Subject<T> {    
    private var observers: [(T) -> Void] = []
    
    mutating func attach<O: Observer>(observer: O) where O.ValueType == T {
        observers.append { observer.update(value: $0) }
    }

    func notyfi(value: T) {
        for observer in observers {
            observer(value)
        }
    }
}

class ConcreteObserver: Observer {
    func update(value: String) {
        print("received: \(value)")
    }
}

func runObserverExample() {
    var subject = Subject<String>()

    let observer1 = ConcreteObserver()
    subject.attach(observer: observer1)

    let observer2 = ConcreteObserver()
    subject.attach(observer: observer2)
    
    subject.notyfi(value: "some string")
}

// Version with more modern syntax
/*
protocol Observer<ValueType> {
    associatedtype ValueType
    func update(value: ValueType)
}

struct Subject<T> {
    private var observers = Array<any Observer<T>>()

    mutating func attach(observer: any Observer<T>) {
        observers.append(observer)
    }

    func notify(value: T) {
        for observer in observers {
            observer.update(value: value)
        }
    }
}
*/

```
-->]]></content><author><name></name></author><category term="swift" /><summary type="html"><![CDATA[Remove story board dependency]]></summary></entry></feed>