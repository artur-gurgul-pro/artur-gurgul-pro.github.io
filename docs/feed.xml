<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-11T15:41:45+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Artur Gurgul</title><subtitle>Here you can find all about me and my experience in software development.
</subtitle><entry><title type="html">Installing Debian sid on QEMU</title><link href="http://localhost:4000/software/debian/debian-sid.html" rel="alternate" type="text/html" title="Installing Debian sid on QEMU" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/software/debian/debian-sid</id><content type="html" xml:base="http://localhost:4000/software/debian/debian-sid.html"><![CDATA[<p>This is the Debian setup where most of the examples shown on the website should work.</p>

<p>Download links:</p>

<!-- https://www.debian.org/CD/live/ -->

<ul>
  <li><a href="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.2.0-amd64-netinst.iso">amd64 - Install disc</a></li>
  <li><a href="https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/">amd64 - Live disc</a></li>
  <li><a href="https://github.com/clearlinux/common/raw/master/OVMF.fd">BIOS</a></li>
</ul>

<p>Make the disk image</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img create -f qcow2 debian.qcow2 16G
</code></pre></div></div>

<p>Other option</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-img create -f raw debian.raw 16G
-drive file=disk.raw,format=raw
</code></pre></div></div>

<p>Start the VM</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="nt">-bios</span> OVMF.fd <span class="nt">-m</span> 1G <span class="nt">-drive</span> <span class="nv">file</span><span class="o">=</span>debian.qcow2,format<span class="o">=</span>qcow2 <span class="se">\</span>
                   <span class="nt">-cdrom</span> debian-12.2.0-amd64-netinst.iso
</code></pre></div></div>

<p>During installation select SSH server, standard system utilities and no desktop</p>

<p>Exit the installation and power off the VM</p>

<p>Start VM with command</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="nt">-bios</span> OVMF.fd <span class="nt">-m</span> 1G <span class="nt">-smp</span> 6 <span class="se">\</span>
                   <span class="nt">-net</span> user,hostfwd<span class="o">=</span>tcp::2222-:22 <span class="nt">-net</span> nic <span class="se">\</span>
                   <span class="nt">-drive</span> <span class="nv">file</span><span class="o">=</span>debian.qcow2,format<span class="o">=</span>qcow2
</code></pre></div></div>
<h4 id="allowing-login-root-user-from-the-network">Allowing login root user from the network</h4>
<p>This is our testing installation, so we do not care about security, but easiness and convenience.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/ssh/sshd_config
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Ctrl-o</code> <code class="language-plaintext highlighter-rouge">Ctrl-x</code></p>

<p>Put this line in the file</p>
<pre><code class="language-plain">PermitRootLogin yes
</code></pre>

<p>and then</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart sshd
</code></pre></div></div>

<p>From now on you can log in to the VM using ssh connection</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh -p 2222 user@localhost
</code></pre></div></div>

<h1 id="making-it-the-sid">Making it the sid</h1>

<p>/etc/apt/sources.list</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb https://deb.debian.org/debian/ sid main contrib non-free non-free-firmware
deb-src https://deb.debian.org/debian/ sid main contrib non-free non-free-firmware
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt upgrade
apt dist-upgrade
apt autoremove

apt <span class="nb">install </span>firmware-linux-nonfree
</code></pre></div></div>

<h1 id="tools">Tools</h1>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>neovim clang
</code></pre></div></div>

<p><strong>Swift</strong></p>

<p>Dependencies</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>build-essential libcurl4-openssl-dev binutils git gnupg2 libc6-dev <span class="se">\</span>
            libedit2 libsqlite3-0 libxml2-dev libz3-dev pkg-config tzdata <span class="se">\</span>
            tzdata unzip zlib1g-dev libgcc-9-dev libncurses-dev <span class="se">\</span>
            libstdc++-9-dev
</code></pre></div></div>

<p>Missing dependencies for Debian sid</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>libpython3.8 
</code></pre></div></div>

<p>Installed instead</p>

<pre><code class="language-plain">apt install libpython3.10-dev python3-clang python3-lldb
</code></pre>

<p>Downloading and installing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://download.swift.org/swift-5.9.1-release/ubuntu2204/swift-5.9.1-RELEASE/swift-5.9.1-RELEASE-ubuntu22.04.tar.gz

tar -xf swift-5.9.1-RELEASE-ubuntu22.04.tar.gz
mv swift-5.9.1-RELEASE-ubuntu22.04 /opt/swift-5.9.1
</code></pre></div></div>

<p>add this line to <code class="language-plaintext highlighter-rouge">/etc/profile</code> so the path will be added for all the users</p>

<pre><code class="language-plain">export PATH="$PATH:/opt/swift-5.9.1/usr/bin"
</code></pre>]]></content><author><name></name></author><category term="software" /><category term="debian" /><summary type="html"><![CDATA[This is the Debian setup where most of the examples shown on the website should work.]]></summary></entry><entry><title type="html">Dynamic member lockup in swift</title><link href="http://localhost:4000/swift/dynamic-member-lockup.html" rel="alternate" type="text/html" title="Dynamic member lockup in swift" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/swift/dynamic-member-lockup</id><content type="html" xml:base="http://localhost:4000/swift/dynamic-member-lockup.html"><![CDATA[<p>Here’s an example of using the <code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code> attribute in Swift:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@dynamicMemberLookup</span>
<span class="kd">struct</span> <span class="kt">DynamicStruct</span> <span class="p">{</span>
    <span class="nf">subscript</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"You accessed dynamic member '</span><span class="se">\(</span><span class="n">member</span><span class="se">)</span><span class="s">'"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">dynamicStruct</span> <span class="o">=</span> <span class="kt">DynamicStruct</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">dynamicStruct</span><span class="o">.</span><span class="n">someDynamicMember</span>
<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c1">// Output: "You accessed dynamic member 'someDynamicMember'"</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="swift" /><summary type="html"><![CDATA[Here’s an example of using the @dynamicMemberLookup attribute in Swift:]]></summary></entry><entry><title type="html">Javascript closure</title><link href="http://localhost:4000/javascript/js-closure.html" rel="alternate" type="text/html" title="Javascript closure" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/javascript/js-closure</id><content type="html" xml:base="http://localhost:4000/javascript/js-closure.html"><![CDATA[<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">NextClosure</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">a</span><span class="o">++</span>
        <span class="k">return</span> <span class="nx">a</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">NextClosure</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">next</span><span class="p">())</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="javascript" /><summary type="html"><![CDATA[var NextClosure = function() { var a = 0; return function next() { a++ return a } }]]></summary></entry><entry><title type="html">Regex - Find any</title><link href="http://localhost:4000/regex/regex-find-any.html" rel="alternate" type="text/html" title="Regex - Find any" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/regex/regex-find-any</id><content type="html" xml:base="http://localhost:4000/regex/regex-find-any.html"><![CDATA[<p>How to match “any character” in the regular expression</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.</code> → any char except newline</li>
  <li><code class="language-plaintext highlighter-rouge">\.</code> → the actual dot character</li>
  <li><code class="language-plaintext highlighter-rouge">.?</code> = <code class="language-plaintext highlighter-rouge">.{0,1}</code> → match any char except newline zero or one times</li>
  <li><code class="language-plaintext highlighter-rouge">.*</code> = <code class="language-plaintext highlighter-rouge">.{0,}</code> → match any char except newline zero or more times</li>
  <li><code class="language-plaintext highlighter-rouge">.+</code> = <code class="language-plaintext highlighter-rouge">.{1,}</code> → match any char except newline one or more times</li>
</ul>]]></content><author><name></name></author><category term="regex" /><summary type="html"><![CDATA[How to match “any character” in the regular expression]]></summary></entry><entry><title type="html">SOLID principles</title><link href="http://localhost:4000/solid.html" rel="alternate" type="text/html" title="SOLID principles" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/solid</id><content type="html" xml:base="http://localhost:4000/solid.html"><![CDATA[<h3 id="single-responsibility-principle">Single responsibility principle</h3>

<p>This mean if the one thing in specification is changed you only need to change the code in the single place or class</p>

<h3 id="openclosed-principle">Open/closed principle</h3>

<p>Software should be open for extension, but closed for modification.</p>

<h3 id="liskov-substitution-principle">Liskov substitution principle</h3>

<p>Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.</p>

<h3 id="interface-segregation-principle">Interface segregation principle</h3>

<p>The interfaces should be small and provide as little methods as possible.</p>

<h3 id="dependency-inversion-principle">Dependency inversion principle</h3>

<p>The lower module must not depends on higher module. In order to achieve this the code must to relay on abstractions (in other words the code has to use interfaces/protocols)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Single responsibility principle]]></summary></entry><entry><title type="html">Git - merge &amp;amp; squash commits</title><link href="http://localhost:4000/git/squash.html" rel="alternate" type="text/html" title="Git - merge &amp;amp; squash commits" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/git/squash</id><content type="html" xml:base="http://localhost:4000/git/squash.html"><![CDATA[<p>Squash the last three commints</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase <span class="nt">-i</span> HEAD~3
</code></pre></div></div>

<p>You will see something like this</p>

<pre><code class="language-plain">pick f392171 Added new feature X
pick ba9dd9a Added new elements to page design
pick df71a27 Updated CSS for new elements
</code></pre>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pick</code> <code class="language-plaintext highlighter-rouge">p</code> the commit will be taken</li>
  <li><code class="language-plaintext highlighter-rouge">squash</code> <code class="language-plaintext highlighter-rouge">s</code>, the commit will be blended with the above.</li>
</ul>

<p>Edit to something like this</p>

<pre><code class="language-plain">pick f392171 New message for this three commit!
squash ba9dd9a
squash df71a27
</code></pre>

<p>Now you can accept the change by continuing the rebase:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase <span class="nt">--continue</span>
</code></pre></div></div>

<p>After that you need to force override the history using this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin master <span class="nt">--force</span>
</code></pre></div></div>

<h2 id="squash-merge">Squash merge</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master
git merge <span class="nt">--squash</span> bugfix
git commit
</code></pre></div></div>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[Squash the last three commints]]></summary></entry><entry><title type="html">Add share gesture as view modifier</title><link href="http://localhost:4000/swift/view-modifier.html" rel="alternate" type="text/html" title="Add share gesture as view modifier" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/swift/view-modifier</id><content type="html" xml:base="http://localhost:4000/swift/view-modifier.html"><![CDATA[<p>The notification we’ll send when a shake gesture happens.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIDevice</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">deviceDidShakeNotification</span> <span class="o">=</span> <span class="kt">Notification</span>
                                              <span class="o">.</span><span class="kt">Name</span><span class="p">(</span><span class="nv">rawValue</span><span class="p">:</span> <span class="s">"deviceDidShakeNotification"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Override the default behavior of shake gestures to send our notification instead.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIWindow</span> <span class="p">{</span>
     <span class="kd">open</span> <span class="k">override</span> <span class="kd">func</span> <span class="nf">motionEnded</span><span class="p">(</span><span class="n">_</span> <span class="nv">motion</span><span class="p">:</span> <span class="kt">UIEvent</span><span class="o">.</span><span class="kt">EventSubtype</span><span class="p">,</span> <span class="n">with</span> <span class="nv">event</span><span class="p">:</span> <span class="kt">UIEvent</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">motion</span> <span class="o">==</span> <span class="o">.</span><span class="n">motionShake</span> <span class="p">{</span>
            <span class="kt">NotificationCenter</span>
                <span class="o">.</span><span class="k">default</span>
                <span class="o">.</span><span class="nf">post</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">UIDevice</span><span class="o">.</span><span class="n">deviceDidShakeNotification</span><span class="p">,</span> <span class="nv">object</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">}</span>
     <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A view modifier that detects shaking and calls a function of our choosing.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DeviceShakeViewModifier</span><span class="p">:</span> <span class="kt">ViewModifier</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span>

    <span class="kd">func</span> <span class="nf">body</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">Content</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="n">content</span>
            <span class="o">.</span><span class="nf">onAppear</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">onReceive</span><span class="p">(</span><span class="kt">NotificationCenter</span>
                           <span class="o">.</span><span class="k">default</span>
                           <span class="o">.</span><span class="nf">publisher</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">UIDevice</span><span class="o">.</span><span class="n">deviceDidShakeNotification</span><span class="p">))</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
                               <span class="nf">action</span><span class="p">()</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A View extension to make the modifier easier to use.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">onShake</span><span class="p">(</span><span class="n">perform</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">modifier</span><span class="p">(</span><span class="kt">DeviceShakeViewModifier</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="n">action</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>An example view that responds to being shaken</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Shake me!"</span><span class="p">)</span>
            <span class="o">.</span><span class="n">onShake</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Device shaken!"</span><span class="p">)</span>
            <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="swift" /><summary type="html"><![CDATA[The notification we’ll send when a shake gesture happens.]]></summary></entry><entry><title type="html">Vim notes</title><link href="http://localhost:4000/software/vim.html" rel="alternate" type="text/html" title="Vim notes" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/software/vim</id><content type="html" xml:base="http://localhost:4000/software/vim.html"><![CDATA[<h4 id="symbols-and-meanings">Symbols and meanings</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">%</code> → current file. An example:  <code class="language-plaintext highlighter-rouge">:so %</code> → Source the current file</li>
  <li><code class="language-plaintext highlighter-rouge">$</code> → end of line</li>
  <li><code class="language-plaintext highlighter-rouge">.</code> → Current line An example: <code class="language-plaintext highlighter-rouge">:.!sh</code> → Pipe current line to <code class="language-plaintext highlighter-rouge">sh</code> and replace it with the output</li>
</ul>

<p>Entering <code class="language-plaintext highlighter-rouge">!!</code> in normal mode is translated to  <code class="language-plaintext highlighter-rouge">:.!</code> I. e. Typing <code class="language-plaintext highlighter-rouge">!!date</code> in normal mode replaces current line with the date.</p>

<h4 id="tips">Tips</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:e[dit]</code> →	Edit the current file. This is useful to re-edit the current file, when it has been changed outside of Vim. <code class="language-plaintext highlighter-rouge">:e!</code> Force reload file</li>
  <li><code class="language-plaintext highlighter-rouge">:help index</code> → Get all default mappings</li>
</ul>

<h4 id="navigation">Navigation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">h</code>  <code class="language-plaintext highlighter-rouge">j</code>  <code class="language-plaintext highlighter-rouge">k</code>  <code class="language-plaintext highlighter-rouge">l</code> → left, down, up, right</li>
  <li><code class="language-plaintext highlighter-rouge">*</code> → Next whole word under cursor (previous <code class="language-plaintext highlighter-rouge">#</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">e</code> → Forward to the end of word. <code class="language-plaintext highlighter-rouge">E</code> can contain punctuation</li>
  <li><code class="language-plaintext highlighter-rouge">w</code> → Move forward to the beginning of a word. <code class="language-plaintext highlighter-rouge">W</code> Same as <code class="language-plaintext highlighter-rouge">w</code>, but special characters are treated as part of a word.</li>
  <li><code class="language-plaintext highlighter-rouge">b</code> → Works as <code class="language-plaintext highlighter-rouge">w</code>, but backwards</li>
  <li><code class="language-plaintext highlighter-rouge">{</code>,<code class="language-plaintext highlighter-rouge">}</code> → Jump by paragraphs</li>
  <li><code class="language-plaintext highlighter-rouge">(</code>,<code class="language-plaintext highlighter-rouge">)</code> → Jump by sentences</li>
  <li><code class="language-plaintext highlighter-rouge">G</code> → Jump to the end of the file</li>
  <li><code class="language-plaintext highlighter-rouge">1G</code> → Jump to the beginning of the file (same as <code class="language-plaintext highlighter-rouge">gg</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">50G</code> → Jump to line 50</li>
  <li><code class="language-plaintext highlighter-rouge">0</code> → Beginning of line</li>
  <li><code class="language-plaintext highlighter-rouge">_</code> or <code class="language-plaintext highlighter-rouge">^</code> → first non-blank character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">g_</code>  → last non-blank character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">fX</code> → next character <code class="language-plaintext highlighter-rouge">X</code>. <code class="language-plaintext highlighter-rouge">FX</code> previous. <code class="language-plaintext highlighter-rouge">;</code>   repeat , <code class="language-plaintext highlighter-rouge">,</code>   repeat in reverse</li>
  <li><code class="language-plaintext highlighter-rouge">tX</code> → tili next <code class="language-plaintext highlighter-rouge">X</code> (similar to above, but the cursor is before <code class="language-plaintext highlighter-rouge">X</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">H</code> → Jump to the top of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">M</code> → Jump to the middle of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">L</code> → Jump to the bottom of the screen</li>
</ul>

<h4 id="scrolling">Scrolling</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">10 &lt;PageUp&gt;</code> or <code class="language-plaintext highlighter-rouge">10&lt;CTRL-B&gt;</code> → Move 10 pages up</li>
  <li><code class="language-plaintext highlighter-rouge">5 &lt;PageDown&gt;</code> or <code class="language-plaintext highlighter-rouge">5&lt;CTRL-F&gt;</code> → Move 5 pages down.</li>
  <li><code class="language-plaintext highlighter-rouge">zz</code>  → scroll the line with the cursor to the center of the screen</li>
  <li><code class="language-plaintext highlighter-rouge">zt</code>  → to the top</li>
  <li><code class="language-plaintext highlighter-rouge">zb</code>  → to the bottom</li>
</ul>

<h3 id="terminal-buffers">Terminal buffers</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:te[rm[inal]] command</code></li>
  <li><code class="language-plaintext highlighter-rouge">:b#</code> switch buffer</li>
  <li><code class="language-plaintext highlighter-rouge">:ls</code> list buffers</li>
  <li><code class="language-plaintext highlighter-rouge">:buff 1</code> or <code class="language-plaintext highlighter-rouge">:b1</code> switch to buffer 1</li>
</ul>

<h3 id="list-of-the-commands">List of the commands</h3>

<p>Common meaning of letters in the commands</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">w</code> → word</li>
  <li><code class="language-plaintext highlighter-rouge">i</code> → inner</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: right">Command</th>
      <th style="text-align: left"> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">dd</code></td>
      <td style="text-align: left">Delete one line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">d</code></td>
      <td style="text-align: left">Delete selection</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">x</code></td>
      <td style="text-align: left">Delete character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">d+</code></td>
      <td style="text-align: left">Delete 2 lines</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%d</code> or :<code class="language-plaintext highlighter-rouge">1,$d</code></td>
      <td style="text-align: left">Delete the whole of the file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">dw</code>, <code class="language-plaintext highlighter-rouge">diw</code></td>
      <td style="text-align: left">Delete what that the cursor is over</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">di(</code></td>
      <td style="text-align: left">Delete inner brackets. <code class="language-plaintext highlighter-rouge">da(</code> → including brackets</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:r[ead] !date</code></td>
      <td style="text-align: left">Execute commend and put content into editor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">.</code></td>
      <td style="text-align: left">Repeat the last operation</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">gU</code></td>
      <td style="text-align: left">Uppercase the selection, <code class="language-plaintext highlighter-rouge">gu</code>  → lower</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">%</code></td>
      <td style="text-align: left">Jump to matching bracket <code class="language-plaintext highlighter-rouge">{ }</code> <code class="language-plaintext highlighter-rouge">[ ]</code> <code class="language-plaintext highlighter-rouge">( )</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%!column -t</code></td>
      <td style="text-align: left">Put text in columns</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:%!sort</code></td>
      <td style="text-align: left">Sort the whole file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;!grep text</code></td>
      <td style="text-align: left">Keep lines that contains <code class="language-plaintext highlighter-rouge">text</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;!sort</code></td>
      <td style="text-align: left">Sort selected lines</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:eariler 1m</code></td>
      <td style="text-align: left">State from the 1 min before</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ga</code></td>
      <td style="text-align: left">Display hex, ascii value of character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">g8 </code></td>
      <td style="text-align: left">Display hex value of utf-8 character under cursor</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ciw</code></td>
      <td style="text-align: left">Change inner word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">yiw</code></td>
      <td style="text-align: left">Yank inner word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">viwp</code></td>
      <td style="text-align: left">Select word and then replace it with previously yanked text</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">rX</code></td>
      <td style="text-align: left">replace every character in selection or under cursor with <code class="language-plaintext highlighter-rouge">X</code></td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">guiw</code></td>
      <td style="text-align: left">Lower case word</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">guu</code></td>
      <td style="text-align: left">Lowercase line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">gUU</code></td>
      <td style="text-align: left">Uppercase line</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">=</code></td>
      <td style="text-align: left">Indent the selection</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">=%</code></td>
      <td style="text-align: left">Indent the current braces</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">G=gg</code></td>
      <td style="text-align: left">indent entire document</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ZZ</code></td>
      <td style="text-align: left">Write current file, if modified, and exit (same as <code class="language-plaintext highlighter-rouge">:wq</code>)</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">ZQ</code></td>
      <td style="text-align: left">Quit current file and exit (same as <code class="language-plaintext highlighter-rouge">:q!</code>)</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">:so %</code></td>
      <td style="text-align: left">Source current file</td>
    </tr>
    <tr>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">@:</code></td>
      <td style="text-align: left">Execute last command again</td>
    </tr>
  </tbody>
</table>

<h4 id="status-line">Status line</h4>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span><span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>%<span class="p">&lt;</span>%<span class="k">f</span>%<span class="k">h</span>%<span class="k">m</span>%<span class="k">r</span>%<span class="p">=</span>%<span class="k">b</span>\ <span class="m">0</span><span class="k">x</span>%B\ \ %<span class="k">l</span><span class="p">,</span>%<span class="k">c</span>%V\ %P
</code></pre></div></div>

<h4 id="visual-mode">Visual Mode</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">V</code> → Selection by lines</li>
  <li><code class="language-plaintext highlighter-rouge">v</code> → Selection follows the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">Ctrl+v</code> →  Block selection
    <ul>
      <li>When selected block you can applay changes to each line by typing <code class="language-plaintext highlighter-rouge">I</code> editing and finally pressing <code class="language-plaintext highlighter-rouge">Esc</code></li>
    </ul>
  </li>
</ul>

<h4 id="enter-insert-mode">Enter Insert Mode</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">I</code> → At the first non white character of the line</li>
  <li><code class="language-plaintext highlighter-rouge">i</code> → On the left of the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">A</code> → At the very end of the line</li>
  <li><code class="language-plaintext highlighter-rouge">a</code> → On the right of the cursor</li>
  <li><code class="language-plaintext highlighter-rouge">c</code> →  Delete selection and enter insert mode</li>
  <li><code class="language-plaintext highlighter-rouge">o</code> → Create new line below and enter insert mode</li>
  <li><code class="language-plaintext highlighter-rouge">O</code> → Create new line above and enter insert mode</li>
</ul>

<h4 id="split-the-editor">Split the editor</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:sp &lt;filename&gt;</code> → Vertically</li>
  <li><code class="language-plaintext highlighter-rouge">:vs &lt;filename&gt;</code> → Horizontally</li>
  <li><code class="language-plaintext highlighter-rouge">:set splitbelow</code>, <code class="language-plaintext highlighter-rouge">:set splitright</code></li>
</ul>

<h4 id="markers">Markers</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:marks</code> →  list of marks</li>
  <li><code class="language-plaintext highlighter-rouge">ma</code> → set current position for mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">`a</code> → jump to the cursor position of mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">'a</code> →  jump to the beginning of a line of a mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">y`a</code> → yank text to position of mark <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">``</code> → Return to the cursor position before the latest jump</li>
  <li><code class="language-plaintext highlighter-rouge">`.</code>  → Jump to the last changed line.</li>
</ul>

<h3 id="recording-macros">Recording macros</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">qa</code> → Start recording macro under letter <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">q</code> → Stop recording</li>
  <li><code class="language-plaintext highlighter-rouge">@a</code> → Play the macro saved under letter a</li>
  <li><code class="language-plaintext highlighter-rouge">@@</code> → Play the last macro</li>
</ol>

<h4 id="searching">Searching</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:%s/Plug.*$//</code> → Search and delete all lines that starts from Plug</li>
  <li><code class="language-plaintext highlighter-rouge">:%s/foo/bar/gc</code> → Replace all occurrence of foo by bar with confirmation</li>
  <li><code class="language-plaintext highlighter-rouge">'&lt;,'&gt;:s/find/replacewith/</code> Replace selection</li>
  <li><code class="language-plaintext highlighter-rouge">/pattern</code> → search for pattern then enter and <code class="language-plaintext highlighter-rouge">n</code> next <code class="language-plaintext highlighter-rouge">N</code> previous match</li>
  <li><code class="language-plaintext highlighter-rouge">?pattern</code> → search backward for pattern</li>
</ul>

<h3 id="registers">Registers</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:reg</code> → print all registers</li>
  <li><code class="language-plaintext highlighter-rouge">"ap</code> → paste the register <code class="language-plaintext highlighter-rouge">a</code> , if the macro is recorded then it will paste it</li>
  <li><code class="language-plaintext highlighter-rouge">"xy</code> → yank into register <code class="language-plaintext highlighter-rouge">x</code></li>
  <li><code class="language-plaintext highlighter-rouge">:let @a = "kkll"</code> → set a macro from the command mode</li>
  <li><code class="language-plaintext highlighter-rouge">:let @A='i'</code>  →  append to register <code class="language-plaintext highlighter-rouge">a</code></li>
  <li><code class="language-plaintext highlighter-rouge">:%normal @a</code>  → execute the macro on all lines of the current file</li>
  <li><code class="language-plaintext highlighter-rouge">:'&lt;,'&gt;normal @a</code>  → execute the macro on a visually selected lines</li>
  <li><code class="language-plaintext highlighter-rouge">:10,20 normal @a</code> → execute the macro for lines from 10 to 20</li>
  <li><code class="language-plaintext highlighter-rouge">:g/pattern/ normal @a</code> → Search for pattern and execute macro for it</li>
</ul>

<h4 id="functions---an-example">Functions - An example</h4>

<p>Function definition</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="p">!</span> CalculateAge<span class="p">()</span>
    normal <span class="m">03</span>wdei^R<span class="p">=</span><span class="m">2012</span><span class="p">-</span>^R"^M^<span class="p">[</span><span class="m">0</span><span class="k">j</span> 
<span class="k">endfunction</span>
</code></pre></div></div>

<p>Key banding to function</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">a</span> <span class="p">:</span><span class="k">call</span> CalculateAge<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</code></pre></div></div>

<p>Preloading vim with macros like</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> @<span class="k">a</span><span class="p">=</span><span class="s1">'03wdei^R=2012-^R"^M^[0j'</span>
</code></pre></div></div>

<p>Call function from the command mode</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:call CalculateAge()
</code></pre></div></div>

<h4 id="configuration">Configuration</h4>

<p>The config file is located at <code class="language-plaintext highlighter-rouge">.config/nvim/init.vim</code></p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="nb">empty</span><span class="p">(</span><span class="nb">glob</span><span class="p">(</span><span class="s1">'~/.local/share/nvim/site/autoload/plug.vim'</span><span class="p">))</span>
  <span class="k">silent</span> <span class="p">!</span>curl <span class="p">-</span>fLo <span class="p">~</span><span class="sr">/.local/</span>share<span class="sr">/nvim/</span>site<span class="sr">/autoload/</span>plug<span class="p">.</span><span class="k">vim</span> <span class="p">--</span>create<span class="p">-</span>dirs
<span class="se">    \</span> https<span class="p">:</span><span class="sr">//</span>raw<span class="p">.</span>githubusercontent<span class="p">.</span><span class="k">com</span><span class="sr">/junegunn/</span><span class="k">vim</span><span class="p">-</span>plug<span class="sr">/master/</span>plug<span class="p">.</span><span class="k">vim</span>
  autocmd <span class="nb">VimEnter</span> * PlugInstall <span class="p">--</span><span class="k">sync</span> <span class="p">|</span> <span class="k">source</span> $MYVIMRC
<span class="k">endif</span>

<span class="k">call</span> plug#begin<span class="p">(</span><span class="s1">'~/.vim/plugged'</span><span class="p">)</span>

  Plug <span class="s1">'junegunn/fzf'</span>

  Plug <span class="s1">'neovim/nvim-lspconfig'</span>
  Plug <span class="s1">'neoclide/coc.nvim'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'branch'</span><span class="p">:</span> <span class="s1">'release'</span><span class="p">}</span>
  
  Plug <span class="s1">'vim-airline/vim-airline'</span>
  Plug <span class="s1">'vim-airline/vim-airline-themes'</span>
  
  Plug <span class="s1">'vim-syntastic/syntastic'</span>
  Plug <span class="s1">'tokorom/syntastic-swiftlint.vim'</span>
  
<span class="k">call</span> plug#end<span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">set relativenumber</code></li>
  <li><code class="language-plaintext highlighter-rouge">set encoding=utf-8</code></li>
  <li><code class="language-plaintext highlighter-rouge">syntax on</code></li>
  <li><code class="language-plaintext highlighter-rouge">map za :FZF&lt;CR&gt;</code> → fuzzy finder over <code class="language-plaintext highlighter-rouge">za</code></li>
</ul>

<p>Indentation setup</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">set tabstop=2 shiftwidth=2 expandtab</code></li>
  <li><code class="language-plaintext highlighter-rouge">filetype plugin indent on</code></li>
</ul>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:syntastic_swift_checkers</span> <span class="p">=</span> <span class="p">[</span><span class="s1">'swiftlint'</span><span class="p">,</span> <span class="s1">'swiftpm'</span><span class="p">]</span>
<span class="k">lua</span> <span class="p">&lt;&lt;</span> EOF
  local lspconfig <span class="p">=</span> require<span class="p">(</span><span class="s1">'lspconfig'</span><span class="p">)</span>
  lspconfig<span class="p">.</span>sourcekit<span class="p">.</span>setup<span class="p">{}</span>
EOF
</code></pre></div></div>

<h4 id="rename-current-file">Rename current file</h4>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">function</span><span class="p">!</span> RenameFile<span class="p">()</span>
    <span class="k">let</span> old_name <span class="p">=</span> <span class="nb">expand</span><span class="p">(</span><span class="s1">'%'</span><span class="p">)</span>
    <span class="k">let</span> new_name <span class="p">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">'New file name: '</span><span class="p">,</span> <span class="nb">expand</span><span class="p">(</span><span class="s1">'%'</span><span class="p">),</span> <span class="s1">'file'</span><span class="p">)</span>
    <span class="k">if</span> new_name <span class="p">!=</span> <span class="s1">''</span> &amp;&amp; new_name <span class="p">!=</span> old_name
        exec <span class="s1">':saveas '</span> <span class="p">.</span> new_name
        exec <span class="s1">':silent !rm '</span> <span class="p">.</span> old_name
        exec <span class="s1">':bd '</span> <span class="p">.</span> old_file
        <span class="k">redraw</span><span class="p">!</span>
    <span class="k">endif</span>
<span class="k">endfunction</span>
<span class="nb">map</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">n</span> <span class="p">:</span><span class="k">call</span> RenameFile<span class="p">()&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</code></pre></div></div>

<!--
### Navigation in Vimr
- jump to the next empty line (the next paragraph)`}` 
* Recording macros
    * `"xp` pastes the contents of the register `x`.


* `~ `      : invert case (upper->lower; lower->upper) of current character
* `gf `     : open file name under cursor (SUPER)

* `ggg?G`  : rot13 whole file
* `xp`      : swap next two characters around
* `CTRL-A,CTRL-X` : increment, decrement next number on same line as the cursor
* `CTRL-R=5*5`    : insert 25 into text



* `'.`       : jump to last modification line (SUPER)
* *`.*       : jump to exact spot in last modification line
* `<C-O>`    : retrace your movements in file (backward)
* `<C-I>`    : retrace your movements in file (forward)
* `:ju(mps)` : list of your movements 
:history : list of all your commands


 Sorting with external sort
:%!sort -u           : contents of the current file is sorted and only unique lines are kept
:'v,'w!sort          : sort from line marked v thru lines marked w
:g/^$/;,/^$/-1!sort  : sort each block (note the crucial ;)

!1} sort             : sorts paragraph; this is issued from normal mode!)

:wn           : write file and move to next (SUPER)
:bd           : remove file from buffer list (SUPER)
:sav php.html : Save current file as php.html and "move" to php.html
:w /some/path/%:r   : save file in another directory, but with the same name
:e #          : edit alternative file
:args         : display argument list
:n            : next file in argument list
:prev         : previous file in argument list
:rew          : rewind to first file in argument list
:ls           : display buffer list
:bn           : next buffer
:bp           : previous buffer
:brew         : rewind to first buffer in buffer list
:tabe         : open new tab page (Ctrl-PgUp, Ctrl-PgDown for next/previous tab)
:tabm n       : move tab to position n (0=leftmost position)

# editing a register/recording
"ap
<you can now see register contents, edit as required>
"add
@a




Ctrl-D  move half-page down
Ctrl-U  move half-page up
Ctrl-B  page up
Ctrl-F  page down
Ctrl-O  jump to last (older) cursor position
Ctrl-I  jump to next cursor position (after Ctrl-O)
Ctrl-Y  move view pane up
Ctrl-E  move view pane down

n   next matching search pattern
N   previous matching search pattern


g*  next matching search (not whole word) pattern under cursor
g#  previous matching search (not whole word) pattern under cursor

de — Delete to the end of the word
^R= — Insert the contents of the special = register, which accepts an expression to evaluate

gUgn - uppercase
gn
n move to the next match


Undo and redo

You can use u to undo the last change. CTRL-R redoes a change that has been undone. U returns the current line to its original state.
You can use g- or g+ to go between text-states. 
Search and replace
* `\vpattern` - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)
* `n` - repeat search in same direction
* `N` - repeat search in opposite direction

* `:noh` - remove highlighting of search matches
Search in multiple files
* `:vimgrep /pattern/ {file}` - search for pattern in multiple files

* e.g. `:vimgrep /foo/ **/*`
* `:cn` - jump to the next match
* `:cp` - jump to the previous match
* `:copen` - open a window containing the list of matches


folding from selection
`: '<,'>fo`

`:help folding`

set foldmethod=syntax
`set foldlevel=1`
`set foldclose=all`


Sequence forfolding lines `Shift+V:fo`
`:set foldmethod=syntax` intent, 
`zo` unfolding
`za` toogle folding
`zf#j` creates a fold from the cursor down # lines.

:CheckHealth
-->]]></content><author><name></name></author><category term="software" /><summary type="html"><![CDATA[Symbols and meanings % → current file. An example: :so % → Source the current file $ → end of line . → Current line An example: :.!sh → Pipe current line to sh and replace it with the output]]></summary></entry><entry><title type="html">Cancelling a publisher</title><link href="http://localhost:4000/swift/cancel-upstream.html" rel="alternate" type="text/html" title="Cancelling a publisher" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/swift/cancel-upstream</id><content type="html" xml:base="http://localhost:4000/swift/cancel-upstream.html"><![CDATA[<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">timer</span> <span class="o">=</span> <span class="kt">Timer</span>
	<span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="nv">every</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="o">.</span><span class="n">main</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">common</span><span class="p">)</span>
	<span class="o">.</span><span class="nf">autoconnect</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">counter</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">subscriber</span> <span class="o">=</span> <span class="n">timer</span>
	<span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
	<span class="o">.</span><span class="n">sink</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
		<span class="k">if</span> <span class="n">counter</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="p">{</span>
			<span class="n">timer</span><span class="o">.</span><span class="n">upstream</span><span class="o">.</span><span class="nf">connect</span><span class="p">()</span><span class="o">.</span><span class="nf">cancel</span><span class="p">()</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">subscriber</span> <span class="o">=</span> <span class="n">timer</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="swift" /><summary type="html"><![CDATA[let timer = Timer .publish(every: 1.0, on: .main, in: .common) .autoconnect()]]></summary></entry><entry><title type="html">Bridging between languages</title><link href="http://localhost:4000/programming/bridging.html" rel="alternate" type="text/html" title="Bridging between languages" /><published>2020-12-26T00:00:00+01:00</published><updated>2020-12-26T00:00:00+01:00</updated><id>http://localhost:4000/programming/bridging</id><content type="html" xml:base="http://localhost:4000/programming/bridging.html"><![CDATA[<p>We can cross call functions from languages that:</p>

<ul>
  <li>Both are compilable → Strategy: Create a binary library and call function from it.</li>
  <li>Library in <code class="language-plaintext highlighter-rouge">interpreted</code> and the project in <code class="language-plaintext highlighter-rouge">compiled</code> → Strategy: Create an interpreter context, then load the files and execute them.</li>
  <li>Library in <code class="language-plaintext highlighter-rouge">compiled</code> and the project in <code class="language-plaintext highlighter-rouge">interpreted</code> → Strategy: Use <code class="language-plaintext highlighter-rouge">FFI</code>.</li>
  <li>Both are interpreted
    <ul>
      <li>Probably give up. Bridging will be possible, but messy and complicated</li>
      <li>Create two programs and exchange data between them using pipe, sockets, message quesues, databses etc.</li>
    </ul>
  </li>
</ul>

<h3 id="creating-shared-and-static-library-in-go">Creating shared and static library in Go</h3>

<p>An example code that is shared <a href="https://github.com/artur-gurgul/codebook"><code class="language-plaintext highlighter-rouge">example.go</code></a>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"C"</span>
<span class="k">import</span> <span class="s">"fmt"</span>

<span class="c">//export SayHello</span>
<span class="k">func</span> <span class="n">SayHello</span><span class="p">(</span><span class="n">hello</span> <span class="o">*</span><span class="n">C</span><span class="o">.</span><span class="n">char</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">GoString</span><span class="p">(</span><span class="n">hello</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">main</code> function is neccecery to include into library, because the final product has to have for example the GC rutines.</li>
  <li>The comment starting from <code class="language-plaintext highlighter-rouge">//export {function name}</code> tells the comiler that this the function will be called from the outside.</li>
</ul>

<h4 id="creating-static-library">Creating static library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build -o example.a -buildmode=c-archive example.go
</code></pre></div></div>

<h4 id="creating-dynamic-library">Creating dynamic library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build -o example.dylib -buildmode=c-shared example.go
</code></pre></div></div>

<h3 id="creating-shared-and-static-library-in-swift">Creating shared and static library in Swift</h3>

<p><code class="language-plaintext highlighter-rouge">point.swift</code></p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="kd">public</span> <span class="k">let</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>and compile with command (module name is optional)</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc point.swift <span class="nt">-emit-module</span>  -module-name Point <span class="nt">-emit-library</span> <span class="nt">-static</span>
</code></pre></div></div>

<p><strong>Using</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Point</span>

<span class="k">let</span> <span class="nv">p</span> <span class="o">=</span> <span class="kt">Point</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Hello library!"</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<p>compile with</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc main.swift <span class="nt">-L</span> ./lib/ <span class="nt">-I</span> ./lib/ <span class="nt">-lpoint</span>
</code></pre></div></div>

<h4 id="dynamic-library-in-swift">Dynamic library in Swift</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swiftc point.swift -emit-module -emit-library
</code></pre></div></div>

<p>it produces</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">libpoint.a</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftdoc</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftmodule</code></li>
  <li><code class="language-plaintext highlighter-rouge">point.swiftsourceinfo</code></li>
</ul>

<p>Compile main program the same way as it has been down with the static one</p>

<p>Library searching paths <code class="language-plaintext highlighter-rouge">/usr/lib/</code>, <code class="language-plaintext highlighter-rouge">/usr/local/lib/</code> </p>

<p><strong><em>Create package that emits library</em></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:5.3</span>
<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">package</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">/// type: automatic, based on the environment</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span> 
		         <span class="c1">// type: .dynamic, .static</span>
		         <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"MyLibrary"</span><span class="p">]</span>
        <span class="p">),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"MyLibrary"</span><span class="p">,</span> <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="calling-function-from-library-in-go">Calling function from library in Go</h3>

<p>First off we will create C++ library that we will use in out Go program.
File <code class="language-plaintext highlighter-rouge">example.cxx</code>:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>

<span class="kt">void</span> <span class="n">PrintHello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">u</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">}</span></code></pre></figure>

<p>And <code class="language-plaintext highlighter-rouge">example.hxx</code>:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#pragma once
</span><span class="kt">void</span> <span class="n">PrintHello</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">u</span><span class="p">)</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">extern "C" {}</code> informs the compiler that we want the function names to be preserved. That is, to not “mangle” the names as is done for C++ code:</p>

<h4 id="creating-static-library-1">Creating static library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ -c -Wall -o lib.o ./example.cxx
ar rc ./libexample.a ./lib.o
</code></pre></div></div>

<h4 id="creating-dynamic-library-1">Creating dynamic library</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang++ -dynamiclib -o libexample.dylib example.cxx
</code></pre></div></div>

<h2 id="statically-linking-an-example-library-in-go">Statically linking an example library in Go</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="c">// #cgo CFLAGS: -I.</span>
<span class="c">// #cgo LDFLAGS: -L. -lexample</span>
<span class="c">//</span>
<span class="c">// #include &lt;example.hxx&gt;</span>
<span class="k">import</span> <span class="s">"C"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">C</span><span class="o">.</span><span class="n">PrintHello</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">CString</span><span class="p">(</span><span class="s">"Hello Golang"</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The program is linked staticaly with libexample when you build it.</p>

<h4 id="example-of-using-library-with-ffi-in-ruby">Example of using library with FFI in Ruby</h4>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">gem <span class="nb">install </span>ffi</code></pre></figure>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'ffi'</span>
<span class="k">module</span> <span class="nn">Example</span>
  <span class="kp">extend</span> <span class="no">FFI</span><span class="o">::</span><span class="no">Library</span>
  <span class="n">ffi_lib</span> <span class="s1">'./example.dylib'</span>
  <span class="n">attach_function</span> <span class="ss">:SayHello</span><span class="p">,</span> <span class="p">[</span><span class="ss">:string</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Example</span><span class="o">.</span><span class="no">SayHello</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">)</span>
</code></pre></div></div>

<p>More informations about FFI: <a href="https://en.wikipedia.org/wiki/Foreign_function_interface">https://en.wikipedia.org/wiki/Foreign_function_interface</a></p>

<h4 id="call-shared-library-from-python">Call shared library from Python</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ctypes</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="p">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'./example.dylib'</span><span class="p">)</span>
<span class="n">libc</span><span class="p">.</span><span class="n">SayHello</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="interesting-websites">Interesting websites</h2>

<ul>
  <li><a href="https://blog.filippo.io/building-python-modules-with-go-1-5/">https://blog.filippo.io/building-python-modules-with-go-1-5/</a></li>
  <li><a href="https://id-rsa.pub/post/go15-calling-go-shared-libs-from-firefox-addon/">https://id-rsa.pub/post/go15-calling-go-shared-libs-from-firefox-addon/</a></li>
</ul>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[We can cross call functions from languages that:]]></summary></entry></feed>